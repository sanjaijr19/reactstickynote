{"version":3,"file":"static/js/127.065cddf0.chunk.js","mappings":"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","sources":["components/PageTitle.js","pages/uikit/RangeSliders.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Stickynote</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React, { useState } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Nouislider from 'nouislider-react';\nimport 'nouislider/distribute/nouislider.css';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\n// RangeSliders\nconst RangeSliders = (): React$Element<React$FragmentType> => {\n    const [selectedVals, setSelectedVals] = useState({\n        '1': { textValue: 20, percent: 20 },\n        '2': { textValue: 20, percent: 20 },\n    });\n    const [selectedRanges, setSelectedRanges] = useState({\n        '1': '20-45',\n        '2': '20-45',\n    });\n\n    const onSlide = (index, value, percent) => {\n        let selectedValues = { ...selectedVals };\n        selectedValues[index] = {\n            textValue: value[0].toFixed(2),\n            percent: percent[0].toFixed(2),\n        };\n        setSelectedVals(selectedValues);\n    };\n\n    const onSlide2 = (index, value) => {\n        let selectedRange = { ...selectedRanges };\n        selectedRange[index] = value[0].toFixed(2) + '-' + value[1].toFixed(2);\n        setSelectedRanges(selectedRange);\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Extended UI', path: '/ui/rangesliders' },\n                    { label: 'Range Sliders', path: '/ui/rangesliders', active: true },\n                ]}\n                title={'Range Sliders'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Single</h4>\n                            <p className=\"text-muted font-14\">Slider with single selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(1, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[1]['textValue']}, &nbsp;\n                                        {selectedVals[1]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(1, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[1]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Slider Step</h4>\n                            <p className=\"text-muted font-14\">Slider with step value</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                step={10}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(2, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[2]['textValue']}, &nbsp;\n                                        {selectedVals[2]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range Slider with Steps</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor with fixed step value</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                step={15}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(2, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[2]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default RangeSliders;\n"],"names":["props","_jsx","Row","children","Col","_jsxs","className","Breadcrumb","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","title","_useState","useState","textValue","percent","_useState2","_slicedToArray","selectedVals","setSelectedVals","_useState3","_useState4","selectedRanges","setSelectedRanges","onSlide","value","selectedValues","_objectSpread","toFixed","onSlide2","selectedRange","_Fragment","PageTitle","xl","Card","Body","Nouislider","range","min","max","start","connect","render","handle","un","step"],"sourceRoot":""}