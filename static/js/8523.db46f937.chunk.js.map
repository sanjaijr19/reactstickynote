{"version":3,"file":"static/js/8523.db46f937.chunk.js","mappings":"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","sources":["components/PageTitle.js","components/Pagination.js","components/Table.js","pages/apps/Ecommerce/Customers.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Stickynote</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype PaginationProps = {\n    tableProps: any,\n    sizePerPageList: {\n        text: string,\n        value: number,\n    }[],\n};\n\nconst Pagination = ({ tableProps, sizePerPageList }: PaginationProps): React$Element<any> => {\n    /**\n     * pagination count , index\n     */\n    const [pageCount, setPageCount] = useState(tableProps.pageCount);\n    const [pageIndex, setPageIndex] = useState(tableProps.state.pageIndex);\n\n    useEffect(() => {\n        setPageCount(tableProps.pageCount);\n        setPageIndex(tableProps.state.pageIndex);\n    }, [tableProps.pageCount, tableProps.state.pageIndex]);\n\n    /**\n     * get filter pages\n     */\n    const filterPages = useCallback(\n        (visiblePages, totalPages) => {\n            return visiblePages.filter((page) => page <= pageCount);\n        },\n        [pageCount]\n    );\n\n    /**\n     * handle visible pages\n     */\n    const getVisiblePages = useCallback(\n        (page: number, total) => {\n            if (total < 7) {\n                return filterPages([1, 2, 3, 4, 5, 6], total);\n            } else {\n                if (page % 5 >= 0 && page > 4 && page + 2 < total) {\n                    return [1, page - 1, page, page + 1, total];\n                } else if (page % 5 >= 0 && page > 4 && page + 2 >= total) {\n                    return [1, total - 3, total - 2, total - 1, total];\n                } else {\n                    return [1, 2, 3, 4, 5, total];\n                }\n            }\n        },\n        [filterPages]\n    );\n\n    /**\n     * handle page change\n     * @param page - current page\n     * @returns\n     */\n    const changePage = (page) => {\n        const activePage = pageIndex + 1;\n\n        if (page === activePage) {\n            return;\n        }\n\n        const visiblePages = getVisiblePages(page, pageCount);\n        setVisiblePages(filterPages(visiblePages, pageCount));\n\n        tableProps.gotoPage(page - 1);\n    };\n\n    useEffect(() => {\n        const visiblePages = getVisiblePages(0, pageCount);\n        setVisiblePages(visiblePages);\n    }, [pageCount, getVisiblePages]);\n\n    const [visiblePages, setVisiblePages] = useState(getVisiblePages(0, pageCount));\n    const activePage = pageIndex + 1;\n\n    return (\n        <div className=\"d-lg-flex align-items-center text-center pb-1\">\n            {sizePerPageList.length > 0 && (\n                <div className=\"d-inline-block me-3\">\n                    <label className=\"me-1\">Display :</label>\n                    <select\n                        value={tableProps.state.pageSize}\n                        onChange={(e) => {\n                            tableProps.setPageSize(Number(e.target.value));\n                        }}\n                        className=\"form-select d-inline-block w-auto\">\n                        {(sizePerPageList || []).map((pageSize, index) => {\n                            return (\n                                <option key={index} value={pageSize.value}>\n                                    {pageSize.text}\n                                </option>\n                            );\n                        })}\n                    </select>\n                </div>\n            )}\n\n            <span className=\"me-3\">\n                Page{' '}\n                <strong>\n                    {pageIndex + 1} of {tableProps.pageOptions.length}\n                </strong>{' '}\n            </span>\n\n            <span className=\"d-inline-block align-items-center text-sm-start text-center my-sm-0 my-2\">\n                <label>Go to page : </label>\n                <input\n                    type=\"number\"\n                    value={pageIndex + 1}\n                    min=\"1\"\n                    onChange={(e: any) => {\n                        const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                        tableProps.gotoPage(page);\n                        setPageIndex(tableProps.state.pageIndex);\n                    }}\n                    className=\"form-control w-25 ms-1 d-inline-block\"\n                />\n            </span>\n\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0\">\n                <li\n                    key=\"prevpage\"\n                    className={classNames('page-item', 'paginate_button', 'previous', {\n                        disabled: activePage === 1,\n                    })}\n                    onClick={() => {\n                        if (activePage === 1) return;\n                        changePage(activePage - 1);\n                    }}>\n                    <Link to=\"#\" className=\"page-link\">\n                        <i className=\"mdi mdi-chevron-left\"></i>\n                    </Link>\n                </li>\n                {(visiblePages || []).map((page, index, array) => {\n                    return array[index - 1] + 1 < page ? (\n                        <React.Fragment key={page}>\n                            <li className=\"page-item disabled d-none d-xl-inline-block\">\n                                <Link to=\"#\" className=\"page-link\">\n                                    ...\n                                </Link>\n                            </li>\n                            <li\n                                className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                    active: activePage === page,\n                                })}\n                                onClick={(e) => changePage(page)}>\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        </React.Fragment>\n                    ) : (\n                        <li\n                            key={page}\n                            className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                active: activePage === page,\n                            })}\n                            onClick={(e) => changePage(page)}>\n                            <Link to=\"#\" className=\"page-link\">\n                                {page}\n                            </Link>\n                        </li>\n                    );\n                })}\n                <li\n                    key=\"nextpage\"\n                    className={classNames('page-item', 'paginate_button', 'next', {\n                        disabled: activePage === tableProps.pageCount,\n                    })}\n                    onClick={() => {\n                        if (activePage === tableProps.pageCount) return;\n                        changePage(activePage + 1);\n                    }}>\n                    <Link to=\"#\" className=\"page-link\">\n                        <i className=\"mdi mdi-chevron-right\"></i>\n                    </Link>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","// @flow\nimport React, { useRef, useEffect, forwardRef } from 'react';\nimport {\n    useTable,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    useGlobalFilter,\n    useAsyncDebounce,\n    useExpanded,\n} from 'react-table';\nimport classNames from 'classnames';\n\n// components\nimport Pagination from './Pagination';\n\n// Define a default UI for filtering\nconst GlobalFilter = ({ preGlobalFilteredRows, globalFilter, setGlobalFilter, searchBoxClass }) => {\n    const count = preGlobalFilteredRows.length;\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce((value) => {\n        setGlobalFilter(value || undefined);\n    }, 200);\n\n    return (\n        <div className={classNames(searchBoxClass)}>\n            <span className=\"d-flex align-items-center\">\n                Search :{' '}\n                <input\n                    value={value || ''}\n                    onChange={(e) => {\n                        setValue(e.target.value);\n                        onChange(e.target.value);\n                    }}\n                    placeholder={`${count} records...`}\n                    className=\"form-control w-auto ms-1\"\n                />\n            </span>\n        </div>\n    );\n};\n\nconst IndeterminateCheckbox = forwardRef(({ indeterminate, ...rest }, ref) => {\n    const defaultRef = useRef();\n    const resolvedRef: any = ref || defaultRef;\n\n    useEffect(() => {\n        resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n        <>\n            <div className=\"form-check\">\n                <input type=\"checkbox\" className=\"form-check-input\" ref={resolvedRef} {...rest} />\n                <label htmlFor=\"form-check-input\" className=\"form-check-label\"></label>\n            </div>\n        </>\n    );\n});\n\ntype TableProps = {\n    isSearchable?: boolean,\n    isSortable?: boolean,\n    pagination?: boolean,\n    isSelectable?: boolean,\n    isExpandable?: boolean,\n    pageSize: number,\n    columns: Array<any>,\n    data: Array<any>,\n    searchBoxClass?: string,\n    tableClass?: string,\n    theadClass?: string,\n    sizePerPageList: {\n        text: string,\n        value: number,\n    }[],\n};\n\nconst Table = (props: TableProps): React$Element<React$FragmentType> => {\n    const isSearchable = props['isSearchable'] || false;\n    const isSortable = props['isSortable'] || false;\n    const pagination = props['pagination'] || false;\n    const isSelectable = props['isSelectable'] || false;\n    const isExpandable = props['isExpandable'] || false;\n\n    const dataTable = useTable(\n        {\n            columns: props['columns'],\n            data: props['data'],\n            initialState: { pageSize: props['pageSize'] || 10 },\n        },\n        isSearchable && useGlobalFilter,\n        isSortable && useSortBy,\n        isExpandable && useExpanded,\n        pagination && usePagination,\n        isSelectable && useRowSelect,\n        (hooks) => {\n            isSelectable &&\n                hooks.visibleColumns.push((columns) => [\n                    // Let's make a column for selection\n                    {\n                        id: 'selection',\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllPageRowsSelectedProps }) => (\n                            <div>\n                                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }) => (\n                            <div>\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                            </div>\n                        ),\n                    },\n                    ...columns,\n                ]);\n\n            isExpandable &&\n                hooks.visibleColumns.push((columns) => [\n                    // Let's make a column for selection\n                    {\n                        // Build our expander column\n                        id: 'expander', // Make sure it has an ID\n                        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n                            <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? '-' : '+'}</span>\n                        ),\n                        Cell: ({ row }) =>\n                            // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n                            // to build the toggle for expanding a row\n                            row.canExpand ? (\n                                <span\n                                    {...row.getToggleRowExpandedProps({\n                                        style: {\n                                            // We can even use the row.depth property\n                                            // and paddingLeft to indicate the depth\n                                            // of the row\n                                            paddingLeft: `${row.depth * 2}rem`,\n                                        },\n                                    })}>\n                                    {row.isExpanded ? '-' : '+'}\n                                </span>\n                            ) : null,\n                    },\n                    ...columns,\n                ]);\n        }\n    );\n\n    let rows = pagination ? dataTable.page : dataTable.rows;\n\n    return (\n        <>\n            {isSearchable && (\n                <GlobalFilter\n                    preGlobalFilteredRows={dataTable.preGlobalFilteredRows}\n                    globalFilter={dataTable.state.globalFilter}\n                    setGlobalFilter={dataTable.setGlobalFilter}\n                    searchBoxClass={props['searchBoxClass']}\n                />\n            )}\n\n\t\t\t<div className=\"table-responsive\">\n\t\t\t\t<table\n\t\t\t\t\t{...dataTable.getTableProps()}\n\t\t\t\t\tclassName={classNames('table table-centered react-table', props['tableClass'])}\n\t\t\t\t>\n\t\t\t\t\t<thead className={props['theadClass']}>\n\t\t\t\t\t{dataTable.headerGroups.map((headerGroup) => (\n\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\n\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\n\t\t\t\t\t\t\t\t<th\n\t\t\t\t\t\t\t\t\t{...column.getHeaderProps(column.sort && column.getSortByToggleProps())}\n\t\t\t\t\t\t\t\t\tclassName={classNames({\n\t\t\t\t\t\t\t\t\t\tsorting_desc: column.isSortedDesc === true,\n\t\t\t\t\t\t\t\t\t\tsorting_asc: column.isSortedDesc === false,\n\t\t\t\t\t\t\t\t\t\tsortable: column.sort === true,\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{column.render('Header')}\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody {...dataTable.getTableBodyProps()}>\n\t\t\t\t\t{(rows || []).map((row, i) => {\n\t\t\t\t\t\tdataTable.prepareRow(row);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr {...row.getRowProps()}>\n\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\n\t\t\t\t\t\t\t\t\treturn <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t\t<tfoot>\n\t\t\t\t\t{dataTable.footerGroups.map((footerGroup) => (\n\t\t\t\t\t\t<tr {...footerGroup.getFooterGroupProps()}>\n\t\t\t\t\t\t\t{footerGroup.headers.map((column) => (\n\t\t\t\t\t\t\t\t<td {...column.getFooterProps()}>{column.render('Footer')}</td>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t\t</tfoot>\n\t\t\t\t</table>\n\t\t\t</div>\n\n\n\t\t\t{pagination && <Pagination tableProps={dataTable} sizePerPageList={props['sizePerPageList']} />}\n        </>\n    );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport Table from '../../../components/Table';\nimport PageTitle from '../../../components/PageTitle';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport 'daterangepicker/daterangepicker.css';\nimport $ from 'jquery';\nimport 'daterangepicker';\n// import profilePic from '../assets/images/users/';\nconst baseURL = '/var/www/html/stickynote/hyper-react-v3.3.0/hyper-react-js/src'; // Define the base URL here\n\nconst Customers = (): React$Element<React$FragmentType> => {\n  const [data, setData] = useState(null);\n  const [dateRange, setDateRange] = useState({\n    startDate: moment().subtract(29, 'days'),\n    endDate: moment(),\n  });\n\n  useEffect(() => {\n    fetchData();\n  }, [dateRange]);\n\n  const fetchData = () => {\n\t\tconst { startDate, endDate } = dateRange;\n\t\tconst fromDate = startDate.format('MMMM D, YYYY');\n\t\tconst toDate = endDate.format('MMMM D, YYYY');\n\n\t\tconsole.log('fromDate:', fromDate);\n\t\tconsole.log('toDate:', toDate);\n\n\t\tfetch(`http://stickynotesandbox.in/index.php/dashboard4/getSalesCountDateWiseAjaxNew/?fromDate=${fromDate}&toDate=${toDate}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tsetData(data);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Error fetching data:', error);\n\t\t\t});\n\t};\n\n  const handleDateRangeChange = (start, end) => {\n    const fromDate = start.format('MMMM D, YYYY');\n    const toDate = end.format('MMMM D, YYYY');\n    console.log('fromDdssaate:', fromDate);\n\t\tconsole.log('toDaasaste:', toDate);\n    $('#daterange-btntdy span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));\n    fetchData(start.format('MMMM D, YYYY'), end.format('MMMM D, YYYY'), false);\n  };\n\nconst columns = [\n  {\n    Header: 'Executives',\n    Footer:'Total',\n    accessor: 'E_Name',\n    sort: true,\n    Cell: ({ row }) => {\n      // const src = `${process.env.PUBLIC_URL}/profiles/${row.original.Executive_Pic}';\n      // const src = '/assets/images/users/avatar.jpeg';\n      const src = require('./profiles/down.jpeg');\n      // {require('./thumbnail.webp')}\n      console.log('Image src:', src);\n\n      let avatar = null;\n      if (row.original.Executive_Pic) { // Corrected typo here\n        avatar = (\n          <img\n            src={src}\n            alt=\"Profile Pic\"\n            className=\"me-2 rounded-circle\"\n            style={{ height: '38px', borderRadius: '50%' , width: '38px', }}\n          />\n        );\n      } else {\n        const initials = row.original.E_Name.charAt(0).toUpperCase();\n        avatar = (\n          <div\n            className=\"profile-pic-alt\"\n            style={{\n              backgroundColor: 'grey',\n              color: 'white',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              height: '32px',\n              width: '32px',\n              borderRadius: '50%',\n            }}\n          >\n            {initials}\n          </div>\n        );\n      }\n      return (\n        <div className=\"table-user\" style={{ display: 'flex', alignItems: 'center' }}>\n          {avatar}\n          <div className=\"d-flex flex-column ms-2\">\n            <Link to=\"#\" className=\"text-body fw-semibold\">\n              {row.original.E_Name}\n            </Link>\n          </div>\n        </div>\n      );\n    },\n  },\n    {\n      Header: 'Count',\n      accessor: 'Overall_Count',\n      sort: true,\n      Footer: ({ data }) => {\n        const total = data.reduce((sum, row) => sum + (row.count || 0), 0);\n        return <div>{total}</div>;\n      },\n    },\n    {\n      Header: 'Revenue',\n      accessor: 'Overall_Revenue',\n      sort: true,\n      Cell: ({ value }) => {\n        const formattedValue = parseFloat(value).toFixed(2);\n        return <span>{formattedValue}</span>;\n      },\n      Footer: ({ data }) => {\n        const total = data.reduce((sum, row) => sum + (row.Revenue || 0), 0);\n        const formattedTotal = total.toFixed(2);\n        return <div>{formattedTotal}</div>;\n      },\n    },\n    {\n      Header: 'Bonus',\n      accessor: 'Inc',\n      sort: true,\n      Cell: ({ value }) => {\n        const formattedValue = parseFloat(value).toFixed(2);\n        return <span>{formattedValue}</span>;\n      },\n      Footer: ({ data }) => {\n        const total = data.reduce((sum, row) => sum + (row.Bonus || 0), 0);\n        const formattedTotal = total.toFixed(2);\n        return <div>{formattedTotal}</div>;\n      },     \n\n    },\n  ];\n\n  const sizePerPageList = [\n    {\n      text: '10',\n      value: 10,\n    },\n    {\n      text: '25',\n      value: 25,\n    },\n    {\n      text: '50',\n      value: 50,\n    },\n  ];\n\n  useEffect(() => {\n    const { startDate, endDate } = dateRange;\n    const options = {\n      startDate,\n      endDate,\n      ranges: {\n        // Define your custom ranges here\n        'Today'       : [moment(), moment()],\n\t\t\t\t'Yesterday'   : [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n\t\t\t\t'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n\t\t\t\t'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n\t\t\t\t'This Month': [moment().startOf('month'), moment().endOf('month')],\n\t\t\t\t'This Week': [moment().startOf('week'), moment().endOf('week')],\n\t\t\t\t'Last week': [moment().subtract(1, 'week').startOf('week'), moment().subtract(1, 'week').endOf('week')],\n\t\t\t\t'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n      },\n      // Add more customization options if needed\n      showDropdowns: true,\n      showWeekNumbers: true,\n      locale: {\n        format: 'MMMM D, YYYY',\n      },\n    };\n\n    $('#daterange-btntdy').daterangepicker(options, (start, end) => {\n      handleDateRangeChange(start, end);\n    });\n  }, []);\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: 'dashboard2', path: '/apps/ecommerce/customers' },\n          {\n            label: 'leaderboard',\n            path: '/apps/ecommerce/customers',\n            active: true,\n          },\n        ]}\n        title={'Sales-LeaderBoard'}\n      />\n\n      <Row>\n        <Col xs={12}>\n          <Card>\n            <Card.Body>\n              <Row>\n                <Col sm={12}>\n                  <div className=\"text-sm-end\">\n                    <Button className=\"btn btn-success mb-2 me-1\" id=\"daterange-btntdy\">\n                      <i className=\"mdi mdi-calendar-month\"></i>\n                    </Button>\n                  </div>\n                </Col>\n              </Row>\n\n              {data ? (\n                <Table\n                  columns={columns}\n                  data={data}\n                  pageSize={10}\n                  sizePerPageList={sizePerPageList}\n                  isSortable={true}\n                  pagination={true}\n                  isSelectable={false}\n                  isSearchable={true}\n                  tableClass=\"table-striped\"\n                  searchBoxClass=\"mt-2 mb-1\"\n                />\n              ) : (\n                <div>Loading...</div>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Customers;\n"],"names":["props","_jsx","Row","children","Col","_jsxs","className","Breadcrumb","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","title","_ref","tableProps","sizePerPageList","_useState","useState","pageCount","_useState2","_slicedToArray","setPageCount","_useState3","state","pageIndex","_useState4","setPageIndex","useEffect","filterPages","useCallback","visiblePages","totalPages","filter","page","getVisiblePages","total","changePage","setVisiblePages","gotoPage","_useState5","_useState6","activePage","length","value","pageSize","onChange","e","setPageSize","Number","target","text","pageOptions","type","min","classNames","disabled","onClick","Link","to","array","React","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","searchBoxClass","count","_React$useState","_React$useState2","setValue","useAsyncDebounce","undefined","placeholder","concat","IndeterminateCheckbox","forwardRef","_ref2","ref","indeterminate","rest","_objectWithoutProperties","_excluded","defaultRef","useRef","resolvedRef","current","_Fragment","_objectSpread","htmlFor","isSearchable","isSortable","pagination","isSelectable","isExpandable","dataTable","useTable","columns","data","initialState","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","hooks","visibleColumns","push","id","Header","_ref3","getToggleAllPageRowsSelectedProps","Cell","_ref4","row","getToggleRowSelectedProps","_toConsumableArray","_ref5","getToggleAllRowsExpandedProps","isAllRowsExpanded","_ref6","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","rows","getTableProps","headerGroups","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","sort","getSortByToggleProps","sorting_desc","isSortedDesc","sorting_asc","sortable","render","getTableBodyProps","i","prepareRow","getRowProps","cells","cell","getCellProps","footerGroups","footerGroup","getFooterGroupProps","getFooterProps","Pagination","setData","startDate","moment","subtract","endDate","dateRange","fetchData","fromDate","format","toDate","console","log","fetch","then","response","json","catch","error","Footer","accessor","src","require","avatar","original","Executive_Pic","alt","height","borderRadius","width","initials","E_Name","charAt","toUpperCase","backgroundColor","color","display","justifyContent","alignItems","reduce","sum","formattedValue","parseFloat","toFixed","formattedTotal","Revenue","Bonus","options","ranges","startOf","endOf","showDropdowns","showWeekNumbers","locale","$","daterangepicker","start","end","html","handleDateRangeChange","PageTitle","xs","Card","Body","sm","Button","Table","tableClass"],"sourceRoot":""}