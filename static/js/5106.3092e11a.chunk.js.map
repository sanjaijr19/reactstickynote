{"version":3,"file":"static/js/5106.3092e11a.chunk.js","mappings":"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","sources":["components/CardTitle.js","components/ChatList.js","components/Datepicker.js","components/PageTitle.js","components/VerticalForm.js","components/FormInput.js","pages/apps/CRM/Management/RevenueStatistics.js","pages/apps/CRM/Management/Projects.js","pages/apps/CRM/Management/data.js","pages/apps/CRM/Management/ClientWidget.js","pages/apps/CRM/Management/MonthlyProgress.js","pages/apps/CRM/Management/TaskStatus.js","pages/apps/CRM/Management/Calendar.js","pages/apps/CRM/Management/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype MenuItem = {\n    label: string,\n    icon?: string,\n    variant?: string,\n    hasDivider?: boolean,\n};\n\ntype CardTitleProps = {\n    menuItems: Array<MenuItem>,\n    title: string | React$Node,\n    containerClass: string,\n    icon?: string,\n};\n\nconst CardTitle = ({ title, containerClass, icon, menuItems }: CardTitleProps): React$Element<any> => {\n    return (\n        <div className={classNames(containerClass)}>\n            {typeof title === 'string' ? <h4 className=\"header-title\">{title}</h4> : title}\n            <Dropdown>\n                <Dropdown.Toggle as={Link} to=\"#\" className=\"arrow-none card-drop\">\n                    <i className={classNames(icon ? icon : 'mdi mdi-dots-vertical')} />\n                </Dropdown.Toggle>\n                <Dropdown.Menu align=\"end\">\n                    {(menuItems || []).map((item, index) => {\n                        return (\n                            <React.Fragment key={index}>\n                                {item.hasDivider && <Dropdown.Divider as=\"div\" />}\n                                <Dropdown.Item className={classNames(item.variant ? item.variant : '')}>\n                                    {item.icon && <i className={classNames(item.icon, 'me-1')}></i>}\n                                    {item.label}\n                                </Dropdown.Item>\n                            </React.Fragment>\n                        );\n                    })}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default CardTitle;\n","// @flow\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport SimpleBar from 'simplebar-react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n//components\nimport { FormInput } from '../components/';\n\n/* Chat Item Avatar */\nconst ChatItemAvatar = ({ userAvatar, postedOn }) => {\n    return (\n        <>\n            <div className=\"chat-avatar\">\n                <img src={userAvatar} alt={userAvatar} />\n                <i>{postedOn}</i>\n            </div>\n        </>\n    );\n};\n\n/* Chat Item Text */\nconst ChatItemText = ({ userName, text }) => {\n    return (\n        <>\n            <div className=\"conversation-text\">\n                <div className=\"ctext-wrap\">\n                    <i>{userName}</i>\n                    <p>{text}</p>\n                </div>\n            </div>\n        </>\n    );\n};\n\n/* Chat Item */\nconst chatItemDefaultProps = {\n    placement: '',\n    children: PropTypes.object,\n    className: '',\n};\n\nconst ChatItem = ({ children, placement, className }) => {\n    return <li className={classNames('clearfix', { odd: placement === 'left' }, className)}>{children}</li>;\n};\n\nChatItem.defaultProps = chatItemDefaultProps;\n\n/**\n * ChatForm\n */\n\n/**\n * Renders the ChatForm\n */\nconst ChatForm = (props) => {\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    /**\n     * Handle valid form submission\n     */\n    const handleValidMessageSubmit = (event, values) => {\n        const message = values.target[0].value;\n        props.onNewMessagesPosted(message);\n        reset();\n    };\n\n    return (\n        <>\n            <form\n                name=\"chat-form\"\n                id=\"chat-form\"\n                onSubmit={handleSubmit(handleValidMessageSubmit)}\n                className=\"needs-validation m-3\">\n                <Row>\n                    <Col>\n                        <FormInput\n                            type=\"text\"\n                            name=\"newMessage\"\n                            className=\"form-control chat-input\"\n                            placeholder=\"Enter your text\"\n                            register={register}\n                            key=\"newMessage\"\n                            errors={errors}\n                            control={control}\n                        />\n                    </Col>\n                    <Col className=\"col-auto\">\n                        <button type=\"submit\" className=\"btn btn-danger chat-send waves-effect waves-light\">\n                            Send\n                        </button>\n                    </Col>\n                </Row>\n            </form>\n        </>\n    );\n};\n\n/**\n * ChatList\n */\n\ntype MessageItem = {\n    id: number,\n    userPic?: string,\n    userName: string,\n    text: string,\n    postedOn: string,\n};\n\ntype ChatListProps = {\n    className?: string,\n    messages: Array<MessageItem>,\n};\n\ntype ChatListState = {\n    messages: Array<MessageItem>,\n};\n\n/**\n * Renders the ChatList\n */\nconst ChatList = (props: ChatListProps, state: ChatListState): React$Element<any> => {\n    const [messages, setMessages] = useState(props.messages);\n\n    /**\n     * Handle new message posted\n     */\n    const handleNewMessagePosted = (message: string) => {\n        // save new message\n        setMessages(\n            messages.concat({\n                id: messages.length + 1,\n                userName: 'Geneva',\n                text: message,\n                postedOn: '10:00',\n            })\n        );\n    };\n\n    return (\n        <>\n            <Card className=\"mb-0\">\n                <Card.Body className=\"p-0\">\n                    <div className=\"px-3 pt-3\">\n                        <Dropdown className=\"float-end\" align=\"end\">\n                            <Dropdown.Toggle variant=\"link\" className=\"arrow-none card-drop p-0 shadow-none\">\n                                <i className=\"mdi mdi-dots-vertical\"></i>\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Dropdown.Item>Refresh</Dropdown.Item>\n                                <Dropdown.Item>Settings</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n\n                        <h4 className=\"header-title mb-3\">Chat</h4>\n                    </div>\n\n                    <div className=\"chat-conversation\">\n                        {/* chat messages */}\n                        <SimpleBar style={{ maxHeight: '350px', width: '100%' }}>\n                            <ul className={classNames('conversation-list', props.className, 'px-3')}>\n                                {messages.map((message, i) => {\n                                    return (\n                                        <ChatItem key={i} placement={i > 0 ? (i % 2 === 0 ? '' : 'left') : 'right'}>\n                                            {message.userPic && (\n                                                <ChatItemAvatar\n                                                    userAvatar={message.userPic}\n                                                    postedOn={message.postedOn}\n                                                />\n                                            )}\n                                            <ChatItemText userName={message.userName} text={message.text} />\n                                        </ChatItem>\n                                    );\n                                })}\n                            </ul>\n                        </SimpleBar>\n\n                        {/* chat form */}\n                        <ChatForm onNewMessagesPosted={handleNewMessagePosted} />\n                    </div>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nexport default ChatList;\n","// @flow\nimport React, { forwardRef } from 'react';\nimport DatePicker from 'react-datepicker';\nimport classNames from 'classnames';\n\ntype DatepickerInputProps = {\n    onClick?: () => void,\n    value?: string,\n};\n\n/* Datepicker with Input */\nconst DatepickerInput = forwardRef((props: DatepickerInputProps, ref) => {\n    const onDateValueChange = () => {\n        console.log('date value changed');\n    };\n    return (\n        <input\n            type=\"text\"\n            className=\"form-control date\"\n            onClick={props.onClick}\n            value={props.value}\n            onChange={onDateValueChange}\n            ref={ref}\n        />\n    );\n});\n\ntype DatepickerInputWithAddonProps = {\n    onClick?: () => void,\n    value?: string,\n};\n/* Datepicker with Addon Input */\nconst DatepickerInputWithAddon = forwardRef((props: DatepickerInputWithAddonProps, ref) => (\n    <div className=\"input-group\" ref={ref}>\n        <input\n            type=\"text\"\n            className=\"form-control form-control-light\"\n            onClick={props.onClick}\n            value={props.value}\n            readOnly\n        />\n        <div className=\"input-group-append\">\n            <span className=\"input-group-text bg-primary border-primary text-white\">\n                <i className=\"mdi mdi-calendar-range font-13\"></i>\n            </span>\n        </div>\n    </div>\n));\n\ntype HyperDatepickerProps = {\n    value: Date,\n    onChange: (date: any) => void,\n    hideAddon?: boolean,\n    inputClass?: string,\n    dateFormat?: string,\n    minDate?: Date,\n    maxDate?: Date,\n    showTimeSelect?: boolean,\n    tI?: number,\n    timeCaption?: string,\n    showTimeSelectOnly?: boolean,\n    monthsShown?: number,\n    inline?: boolean,\n};\n\nconst HyperDatepicker = (props: HyperDatepickerProps): React$Element<any> => {\n    // handle custom input\n    const input = (props.hideAddon || false) === true ? <DatepickerInput /> : <DatepickerInputWithAddon />;\n\n    return (\n        <>\n            {/* date picker control */}\n            <DatePicker\n                customInput={input}\n                timeIntervals={props.tI}\n                className={classNames('form-control', props.inputClass)}\n                selected={props.value}\n                onChange={(date) => props.onChange(date)}\n                showTimeSelect={props.showTimeSelect}\n                timeFormat=\"hh:mm a\"\n                timeCaption={props.timeCaption}\n                dateFormat={props.dateFormat || 'MM/dd/yyyy'}\n                minDate={props.minDate}\n                maxDate={props.maxDate}\n                monthsShown={props.monthsShown}\n                showTimeSelectOnly={props.showTimeSelectOnly}\n                inline={props.inline}\n                autoComplete=\"off\"\n            />\n        </>\n    );\n};\n\nexport default HyperDatepicker;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Stickynote</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// @flow\nimport React from 'react';\nimport { Card } from 'react-bootstrap';\nimport Chart from 'react-apexcharts';\n\n// component\nimport CardTitle from '../../../../components/CardTitle';\n\nconst RevenueStatistics = (): React$Element<any> => {\n    const apexLineChartWithLables = {\n        chart: {\n            height: 364,\n            type: 'line',\n            dropShadow: {\n                enabled: true,\n                opacity: 0.1,\n                blur: 7,\n                left: -7,\n                top: 7,\n            },\n            parentHeightOffset: 0,\n        },\n        grid: {\n            padding: {\n                left: 20,\n                right: 0,\n            },\n        },\n        dataLabels: {\n            enabled: false,\n        },\n        stroke: {\n            curve: 'smooth',\n            width: 4,\n        },\n        zoom: {\n            enabled: false,\n        },\n        legend: {\n            show: false,\n        },\n        colors: ['#727cf5', '#0acf97'],\n        xaxis: {\n            type: 'string',\n            categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            tooltip: {\n                enabled: false,\n            },\n            axisBorder: {\n                show: false,\n            },\n        },\n        yaxis: {\n            labels: {\n                formatter: function (val) {\n                    return val + 'k';\n                },\n            },\n        },\n    };\n\n    const apexLineChartWithLablesData = [\n        {\n            name: 'Budget',\n            data: [10, 20, 15, 28, 22, 34],\n        },\n        {\n            name: 'Revenue',\n            data: [2, 26, 10, 38, 30, 48],\n        },\n    ];\n\n    return (\n        <Card>\n            <Card.Body>\n                <CardTitle\n                    containerClass=\"d-flex align-items-center justify-content-between mb-1\"\n                    title=\"Revenue Statistics\"\n                    menuItems={[\n                        { label: 'Today' },\n                        { label: 'Yesterday' },\n                        { label: 'Last Week' },\n                        { label: 'Last Month' },\n                    ]}\n                />\n                <Chart\n                    options={apexLineChartWithLables}\n                    series={apexLineChartWithLablesData}\n                    type=\"line\"\n                    className=\"apex-charts mt-2\"\n                    height={361}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default RevenueStatistics;\n","// @flow\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Badge, Card, Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// component\nimport CardTitle from '../../../../components/CardTitle';\n\ntype AssignTo = {\n    avatar: string,\n};\n\ntype ProjectOverviewItems = {\n    icon: string,\n    variant: string,\n    title: string,\n    subTitle: string,\n    hours: number,\n    task: number,\n    assignTo: Array<AssignTo>,\n};\n\ntype ProjectOverviewProps = {\n    projectsData: Array<ProjectOverviewItems>,\n};\n\nconst ProjectOverview = ({ project }: { project: ProjectOverviewItems }): React$Element<React$FragmentType> => {\n    const displayCount = 2;\n\n    let modifiedTeamMembers;\n\n    if (project.assignTo.length <= displayCount || project.assignTo.length - displayCount === 1) {\n        modifiedTeamMembers = project.assignTo;\n    } else {\n        modifiedTeamMembers = project.assignTo.filter((m, index) => index < displayCount);\n    }\n\n    return (\n        <Card>\n            <Card.Body>\n                <CardTitle\n                    containerClass=\"d-flex justify-content-between mb-3\"\n                    title={\n                        <>\n                            <div className=\"flex-shrink-0\">\n                                <div className=\"avatar-sm\">\n                                    <span\n                                        className={classNames(\n                                            'avatar-title',\n                                            'bg-' + project.variant + '-lighten',\n                                            'text-' + project.variant,\n                                            'rounded'\n                                        )}>\n                                        <i className={classNames(project.icon, 'font-24')} />\n                                    </span>\n                                </div>\n                            </div>\n                            <div className=\"flex-grow-1 ms-3\">\n                                <Link to=\"#\" className=\"font-16 fw-bold text-secondary\">\n                                    {project.title}{' '}\n                                    <i className=\"mdi mdi-checkbox-marked-circle-outline text-success\"></i>\n                                </Link>\n                                <p className=\"text-muted mb-0\">{project.subTitle}</p>\n                            </div>\n                        </>\n                    }\n                    menuItems={[\n                        { label: 'Edit', icon: 'uil uil-pen' },\n                        { label: 'Remove', icon: 'uil uil-trash', variant: 'text-danger' },\n                    ]}\n                />\n                <Badge bg=\"light\" pill className=\"badge-lg text-secondary me-1\">\n                    Work in Progress\n                </Badge>\n                <span className=\"font-12 fw-semibold text-muted\">\n                    <i className=\"mdi mdi-clock-time-four me-1\"></i>\n                    {project.hours} Hours\n                </span>\n\n                <Row className=\"mt-2\">\n                    <Col xs={6}>\n                        <p className=\"text-muted fw-semibold mb-1\">Tasks</p>\n                        <h3 className=\"my-0 text-muted fw-normal\">{project.task}</h3>\n                    </Col>\n                    <Col xs={6} className=\"text-end\">\n                        <p className=\"text-muted fw-semibold mb-1\">Assign to</p>\n                        <div className=\"multi-user\">\n                            {(modifiedTeamMembers || []).map((assign, i) => {\n                                return (\n                                    <Link to=\"#\" className=\"d-inline-block\" key={i}>\n                                        <img src={assign.avatar} alt=\"\" className=\"rounded-circle avatar-xs\" />\n                                    </Link>\n                                );\n                            })}\n                            {project.assignTo.length > modifiedTeamMembers.length && (\n                                <Link to=\"#\" className=\"d-inline-block ms-n2\">\n                                    <div className=\"avatar-xs\">\n                                        <span className=\"avatar-title bg-primary rounded-circle\">\n                                            {project.assignTo.length - displayCount}+\n                                        </span>\n                                    </div>\n                                </Link>\n                            )}\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Projects = ({ projectsData }: ProjectOverviewProps): React$Element<React$FragmentType> => {\n    return (\n        <Row>\n            {(projectsData || []).map((project, i) => {\n                return (\n                    <Col md={6} key={i}>\n                        <ProjectOverview project={project} />\n                    </Col>\n                );\n            })}\n        </Row>\n    );\n};\n\nexport default Projects;\n","// images\nimport avatar1 from '../../../../assets/images/users/avatar-1.jpg';\nimport avatar2 from '../../../../assets/images/users/avatar-2.jpg';\nimport avatar3 from '../../../../assets/images/users/avatar-3.jpg';\nimport avatar4 from '../../../../assets/images/users/avatar-4.jpg';\nimport avatar5 from '../../../../assets/images/users/avatar-5.jpg';\nimport avatar6 from '../../../../assets/images/users/avatar-6.jpg';\n\nconst projectsData = [\n    {\n        icon: 'mdi mdi-shopping-outline',\n        variant: 'primary',\n        title: 'Ecommerce App Design',\n        subTitle: 'Dashboard, Pages & Auth Pages',\n        hours: 145,\n        task: 16,\n        assignTo: [\n            {\n                avatar: avatar1,\n            },\n            {\n                avatar: avatar2,\n            },\n            {\n                avatar: avatar3,\n            },\n        ],\n    },\n    {\n        icon: 'mdi mdi-account-network',\n        variant: 'success',\n        title: 'Client Power System',\n        subTitle: 'Dashboard, Power System Pages',\n        hours: 260,\n        task: 24,\n        assignTo: [\n            {\n                avatar: avatar4,\n            },\n            {\n                avatar: avatar3,\n            },\n        ],\n    },\n    {\n        icon: 'mdi mdi-page-layout-header',\n        variant: 'info',\n        title: 'Landing Pages Design',\n        subTitle: 'Business Landing with Auth Pages',\n        hours: 48,\n        task: 5,\n        assignTo: [\n            {\n                avatar: avatar5,\n            },\n            {\n                avatar: avatar6,\n            },\n        ],\n    },\n    {\n        icon: 'mdi mdi-monitor-dashboard',\n        variant: 'danger',\n        title: 'Business Dashboard Design',\n        subTitle: 'Dashboard, Components Pages',\n        hours: 24,\n        task: 8,\n        assignTo: [\n            {\n                avatar: avatar5,\n            },\n            {\n                avatar: avatar6,\n            },\n            {\n                avatar: avatar1,\n            },\n            {\n                avatar: avatar2,\n            },\n        ],\n    },\n];\n\nconst clientDetails = [\n    {\n        avatar: avatar1,\n        name: 'Kevin Snowden',\n        companyName: 'Simple Solutions LLC',\n        date: 'Jan 05 2022',\n    },\n    {\n        avatar: avatar2,\n        name: 'Steven Embry',\n        companyName: 'Flipside Records LLC',\n        date: 'Jan 10 2022',\n    },\n    {\n        avatar: avatar3,\n        name: 'James McDonald',\n        companyName: 'Vision Clinics LLC',\n        date: 'Jan 12 2022',\n    },\n    {\n        avatar: avatar4,\n        name: 'Ralph Wolford',\n        companyName: 'Merry-Go-Round LLC',\n        date: 'Jan 18 2022',\n    },\n    {\n        avatar: avatar5,\n        name: 'Tomas Cooper',\n        companyName: 'Museum LLC',\n        date: 'Feb 02 2022',\n    },\n];\n\nconst progressDetails = [\n    {\n        avatar: avatar1,\n        name: 'Adam Baldwin',\n        emailId: 'AdamNBaldwin@dayrep.com',\n        projectName: 'Admin Dashboard',\n        status: 'In Progress',\n    },\n    {\n        avatar: avatar2,\n        name: 'Peter Wallace',\n        emailId: 'PeterGWallace@dayrep.com',\n        projectName: 'Landing Page',\n        status: 'Completed',\n    },\n    {\n        avatar: avatar3,\n        name: 'Jacob Dunn',\n        emailId: 'JacobEDunn@dayrep.com',\n        projectName: 'Logo Design',\n        status: 'Pending',\n    },\n    {\n        avatar: avatar4,\n        name: 'Terry Adams',\n        emailId: 'TerryCAdams@dayrep.com',\n        projectName: 'Client Project',\n        status: 'In Progress',\n    },\n    {\n        avatar: avatar5,\n        name: 'Jason Stovall',\n        emailId: 'JasonJStovall@armyspy.com',\n        projectName: 'Figma Work',\n        status: 'Pending',\n    },\n];\n\nconst taskDetails = [\n    {\n        icon: 'mdi mdi-file-edit',\n        variant: 'primary',\n        title: 'Running Project',\n        totalTask: 160,\n        completedTask: 145,\n        progressValue: 91,\n    },\n    {\n        icon: 'mdi mdi-account-multiple',\n        variant: 'success',\n        title: 'Active Clients',\n        totalTask: 85,\n        completedTask: 40,\n        progressValue: 47,\n    },\n    {\n        icon: 'mdi mdi-account-multiple-plus',\n        variant: 'danger',\n        title: 'New Request',\n        progressValue: 68,\n    },\n    {\n        icon: 'mdi mdi-emoticon-happy',\n        variant: 'info',\n        title: 'Happy Clients',\n        totalTask: 50,\n        completedTask: 48,\n        progressValue: 90,\n    },\n];\n\nconst chatMessages = [\n    {\n        id: 1,\n        userPic: avatar1,\n        userName: 'Geneva',\n        text: 'Hello!',\n        postedOn: '10:00',\n    },\n    {\n        id: 2,\n        userPic: avatar5,\n        userName: 'Dominic',\n        text: 'Hi, How are you? What about our next meeting?',\n        postedOn: '10:01',\n    },\n    {\n        id: 3,\n        userPic: avatar1,\n        userName: 'Geneva',\n        text: 'Yeah everything is fine',\n        postedOn: '10:02',\n    },\n    {\n        id: 4,\n        userPic: avatar5,\n        userName: 'Dominic',\n        text: \"Wow that's great!\",\n        postedOn: '10:03',\n    },\n    {\n        id: 5,\n        userPic: avatar1,\n        userName: 'Dominic',\n        text: 'Cool!',\n        postedOn: '10:03',\n    },\n];\nexport { projectsData, clientDetails, progressDetails, taskDetails, chatMessages };\n","// @flow\nimport React, { useState } from 'react';\nimport { Card, Col, Modal, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// component\nimport ChatList from '../../../../components/ChatList';\n\n// images\nimport clientImg from '../../../../assets/images/users/avatar-4.jpg';\n\n// dummy data\nimport { chatMessages } from './data';\nimport CardTitle from '../../../../components/CardTitle';\n\ntype ClientWidgetItems = {\n    avatar: string,\n    name: string,\n    companyName: string,\n    date: string,\n};\n\ntype ClientWidgetProps = {\n    clientDetails: Array<ClientWidgetItems>,\n};\n\nconst ClientWidget = ({ clientDetails }: ClientWidgetProps): React$Element<React$FragmentType> => {\n    const [modal, setModal] = useState(false);\n\n    // Show/hide the modal\n    const toggle = () => {\n        setModal(!modal);\n    };\n\n    return (\n        <>\n            {(clientDetails || []).map((client, i) => {\n                return (\n                    <Col key={i}>\n                        <Card>\n                            <Card.Body>\n                                <CardTitle\n                                    containerClass=\"d-flex\"\n                                    title={\n                                        <>\n                                            <div className=\"flex-shrink-0\">\n                                                <img src={client.avatar} alt=\"\" className=\"rounded-circle avatar-sm\" />\n                                            </div>\n                                            <div className=\"flex-grow-1 ms-2\">\n                                                <Link to=\"#\" className=\"text-secondary\">\n                                                    <h5 className=\"my-1\">{client.name}</h5>\n                                                </Link>\n                                                <p className=\"text-muted mb-0\">{client.companyName}</p>\n                                            </div>\n                                        </>\n                                    }\n                                    icon=\"mdi mdi-dots-horizontal\"\n                                    menuItems={[\n                                        { label: 'Visite Profile', icon: 'mdi mdi-account' },\n                                        { label: 'Block', icon: 'mdi mdi-block-helper' },\n                                        {\n                                            label: 'Remove',\n                                            icon: 'mdi mdi-trash-can-outline',\n                                            variant: 'text-danger',\n                                            hasDivider: true,\n                                        },\n                                    ]}\n                                />\n                            </Card.Body>\n                            <div className=\"d-flex justify-content-between align-items-center card-body py-2 border-top border-light\">\n                                <h5 className=\"my-0 font-13 fw-semibold text-muted\">\n                                    <i className=\"mdi mdi-calendar me-1\"></i>\n                                    Jan 05 2022\n                                </h5>\n                                <Link to=\"#\" className=\"text-muted\" onClick={toggle}>\n                                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>Chat</Tooltip>}>\n                                        <i className=\"uil uil-comment-alt-lines font-18\"></i>\n                                    </OverlayTrigger>\n                                </Link>\n                            </div>\n                        </Card>\n                    </Col>\n                );\n            })}\n\n            <Modal show={modal} onHide={toggle}>\n                <Modal.Header onHide={toggle} closeButton>\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n                        <div className=\"d-flex align-items-center\">\n                            <div className=\"flex-shrink-0\">\n                                <img className=\"rounded-circle\" src={clientImg} height=\"40\" alt=\"AvtarImage\" />\n                            </div>\n                            <div className=\"flex-grow-1 ms-2\">\n                                <Link to=\"#\" className=\"text-secondary\">\n                                    Kevin Snowden\n                                </Link>\n                                <p className=\"text-muted fw-normal font-14 mb-0\">\n                                    <i className=\"mdi mdi-circle text-success font-12 me-1\"></i>\n                                    Online\n                                </p>\n                            </div>\n                        </div>\n                    </h5>\n                </Modal.Header>\n                <Modal.Body className=\"p-0\">\n                    <ChatList messages={chatMessages}></ChatList>\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n};\n\nexport default ClientWidget;\n","// @flow\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Badge, Card, Table, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// component\nimport CardTitle from '../../../../components/CardTitle';\n\ntype MonthlyProgressItems = {\n    avatar: string,\n    name: string,\n    emailId: string,\n    projectName: string,\n    status: string,\n};\n\ntype MonthlyProgressProps = {\n    progressDetails: Array<MonthlyProgressItems>,\n};\n\nconst MonthlyProgress = ({ progressDetails }: MonthlyProgressProps): React$Element<React$FragmentType> => {\n    return (\n        <Card>\n            <Card.Body>\n                <CardTitle\n                    containerClass=\"d-flex align-items-center justify-content-between\"\n                    title=\"Monthly Progress\"\n                    menuItems={[\n                        { label: 'Today' },\n                        { label: 'Yesterday' },\n                        { label: 'Last Week' },\n                        { label: 'Last Month' },\n                    ]}\n                />\n                <Table responsive className=\"table-centered table-nowrap mb-0\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Employee Name</th>\n                            <th scope=\"col\">Email Address</th>\n                            <th scope=\"col\">Project Name</th>\n                            <th scope=\"col\">Status</th>\n                            <th scope=\"col\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {(progressDetails || []).map((progress, i) => {\n                            return (\n                                <tr key={i}>\n                                    <td>\n                                        <div className=\"d-flex align-items-center\">\n                                            <div className=\"flex-shrink-0\">\n                                                <img\n                                                    src={progress.avatar}\n                                                    alt=\"\"\n                                                    className=\"rounded-circle\"\n                                                    width=\"31\"\n                                                />\n                                            </div>\n                                            <div className=\"flex-grow-1 ms-2\">{progress.name}</div>\n                                        </div>\n                                    </td>\n                                    <td>{progress.emailId}</td>\n                                    <td>{progress.projectName}</td>\n                                    <td>\n                                        <Badge\n                                            className={classNames({\n                                                'bg-primary-lighten text-primary': progress.status === 'In Progress',\n                                                'bg-success-lighten text-success': progress.status === 'Completed',\n                                                'bg-warning-lighten text-warning': progress.status === 'Pending',\n                                            })}>\n                                            {progress.status}\n                                        </Badge>\n                                    </td>\n                                    <td>\n                                        <OverlayTrigger placement=\"top\" overlay={<Tooltip>Edit</Tooltip>}>\n                                            <Link to=\"#\" className=\"font-18 text-info me-2\">\n                                                <i className=\"uil uil-pen\"></i>\n                                            </Link>\n                                        </OverlayTrigger>\n                                        <OverlayTrigger placement=\"top\" overlay={<Tooltip>Delete</Tooltip>}>\n                                            <Link to=\"#\" className=\"font-18 text-danger\">\n                                                <i className=\"uil uil-trash\"></i>\n                                            </Link>\n                                        </OverlayTrigger>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default MonthlyProgress;\n","// @flow\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Card, ProgressBar } from 'react-bootstrap';\n\n// component\nimport CardTitle from '../../../../components/CardTitle';\n\ntype TaskStatusItems = {\n    icon: string,\n    variant: string,\n    title: string,\n    totalTask?: number,\n    completedTask?: number,\n    progressValue?: number,\n};\n\ntype TaskStatusProps = {\n    taskDetails: Array<TaskStatusItems>,\n};\n\nconst TaskStatus = ({ taskDetails }: TaskStatusProps): React$Element<React$FragmentType> => {\n    return (\n        <Card>\n            <Card.Body>\n                <CardTitle\n                    containerClass=\"d-flex align-items-center justify-content-between mb-3\"\n                    title=\"Task Status\"\n                    menuItems={[\n                        { label: 'Today' },\n                        { label: 'Yesterday' },\n                        { label: 'Last Week' },\n                        { label: 'Last Month' },\n                    ]}\n                />\n                {(taskDetails || []).map((task, i) => {\n                    return (\n                        <div className={classNames({ 'mb-4': i < taskDetails.length - 1 })} key={i}>\n                            <div className=\"d-flex align-items-center mb-2\">\n                                <div className=\"flex-shrink-0\">\n                                    <i\n                                        className={classNames(\n                                            task.icon,\n                                            'widget-icon',\n                                            'bg-' + task.variant + '-lighten',\n                                            'text-' + task.variant\n                                        )}\n                                    />\n                                </div>\n                                <div className=\"flex-grow-1 ms-2\">\n                                    <h5 className=\"my-0 fw-semibold\">{task.title}</h5>\n                                </div>\n                                {task.completedTask ? (\n                                    <h5 className=\"my-0\">\n                                        {task.completedTask}/{task.totalTask}\n                                    </h5>\n                                ) : (\n                                    <h5 className=\"my-0\">{task.progressValue}%</h5>\n                                )}\n                            </div>\n                            <ProgressBar variant={task.variant} now={task.progressValue} style={{ height: 6 }} />\n                        </div>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default TaskStatus;\n","// @flow\nimport React, { useState } from 'react';\nimport { Card } from 'react-bootstrap';\n\n// component\nimport CardTitle from '../../../../components/CardTitle';\n\n// component\nimport HyperDatepicker from '../../../../components/Datepicker';\n\nconst Calendar = (): React$Element<any> => {\n    const [date, setDate] = useState(new Date());\n\n    return (\n        <Card>\n            <Card.Body className=\"pb-1\">\n                <CardTitle\n                    containerClass=\"d-flex align-items-center justify-content-between\"\n                    title=\"Calendar\"\n                    menuItems={[\n                        { label: 'Today' },\n                        { label: 'Yesterday' },\n                        { label: 'Last Week' },\n                        { label: 'Last Month' },\n                    ]}\n                />\n            </Card.Body>\n            <Card.Body className=\"calendar-widget px-2 pb-2 pt-0\">\n                <HyperDatepicker value={date} onChange={(date) => setDate(date)} inline />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default Calendar;\n","// @flow\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\n// component\nimport PageTitle from '../../../../components/PageTitle';\n\nimport RevenueStatistics from './RevenueStatistics';\nimport Projects from './Projects';\nimport ClientWidget from './ClientWidget';\nimport MonthlyProgress from './MonthlyProgress';\nimport TaskStatus from './TaskStatus';\n\n// dummy data\nimport { clientDetails, progressDetails, projectsData, taskDetails } from './data';\nimport Calendar from './Calendar';\n\nconst CRMManagement = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'CRM', path: '/apps/crm/management' },\n                    { label: 'Management', path: '/apps/crm/management', active: true },\n                ]}\n                title={'Management'}\n            />\n\n            <Row>\n                <Col xxl={6}>\n                    <RevenueStatistics />\n                </Col>\n                <Col xxl={6}>\n                    <Projects projectsData={projectsData} />\n                </Col>\n            </Row>\n\n            <h4 className=\"page-title mb-3\">Recently Updated Clients</h4>\n\n            <Row className=\"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xxl-5\">\n                <ClientWidget clientDetails={clientDetails} />\n            </Row>\n\n            <Row>\n                <Col xxl={6}>\n                    <MonthlyProgress progressDetails={progressDetails} />\n                </Col>\n                <Col xxl={3} md={6}>\n                    <TaskStatus taskDetails={taskDetails} />\n                </Col>\n                <Col xxl={3} md={6}>\n                    <Calendar />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default CRMManagement;\n"],"names":["_ref","title","containerClass","icon","menuItems","_jsxs","className","classNames","children","_jsx","Dropdown","Toggle","as","Link","to","Menu","align","map","item","index","React","hasDivider","Divider","Item","variant","label","ChatItemAvatar","userAvatar","postedOn","_Fragment","src","alt","ChatItemText","_ref2","userName","text","chatItemDefaultProps","placement","PropTypes","ChatItem","_ref3","odd","defaultProps","ChatForm","props","schemaResolver","yupResolver","yup","shape","newMessage","required","methods","useForm","resolver","handleSubmit","register","control","errors","formState","reset","name","id","onSubmit","event","values","message","target","value","onNewMessagesPosted","Row","Col","FormInput","type","placeholder","state","_useState","useState","messages","_useState2","_slicedToArray","setMessages","Card","Body","SimpleBar","style","maxHeight","width","i","userPic","concat","length","DatepickerInput","forwardRef","ref","onClick","onChange","console","log","DatepickerInputWithAddon","readOnly","input","hideAddon","DatePicker","customInput","timeIntervals","tI","inputClass","selected","date","showTimeSelect","timeFormat","timeCaption","dateFormat","minDate","maxDate","monthsShown","showTimeSelectOnly","inline","autoComplete","Breadcrumb","listProps","href","breadCrumbItems","active","path","defaultValues","formClass","noValidate","Array","isArray","child","_objectSpread","key","PasswordInput","refCallback","showPassword","setShowPassword","InputGroup","Form","Control","r","isInvalid","labelClassName","otherProps","_objectWithoutProperties","_excluded","comp","Group","Label","Feedback","Select","Check","CardTitle","Chart","options","chart","height","dropShadow","enabled","opacity","blur","left","top","parentHeightOffset","grid","padding","right","dataLabels","stroke","curve","zoom","legend","show","colors","xaxis","categories","tooltip","axisBorder","yaxis","labels","formatter","val","series","data","ProjectOverview","modifiedTeamMembers","project","assignTo","filter","m","subTitle","Badge","bg","pill","hours","xs","task","assign","avatar","projectsData","md","avatar1","avatar2","avatar3","avatar4","avatar5","avatar6","clientDetails","companyName","progressDetails","emailId","projectName","status","taskDetails","totalTask","completedTask","progressValue","chatMessages","modal","setModal","toggle","client","OverlayTrigger","overlay","Tooltip","Modal","onHide","Header","closeButton","clientImg","ChatList","Table","responsive","scope","progress","ProgressBar","now","Date","setDate","HyperDatepicker","PageTitle","xxl","RevenueStatistics","Projects","ClientWidget","MonthlyProgress","TaskStatus","Calendar"],"sourceRoot":""}