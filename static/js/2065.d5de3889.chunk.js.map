{"version":3,"file":"static/js/2065.d5de3889.chunk.js","mappings":"uNAmDA,EAvCqB,SAAHA,GAM4B,IAL1CC,EAAaD,EAAbC,cACAC,EAAQF,EAARE,SACAC,EAAQH,EAARG,SACAC,EAAQJ,EAARI,SACAC,EAASL,EAATK,UAKMC,GAAUC,EAAAA,EAAAA,IAAQ,CAAEN,cAAAA,EAAeC,SAAAA,IAErCM,EAIAF,EAJAE,aACAC,EAGAH,EAHAG,SACAC,EAEAJ,EAFAI,QACaC,EACbL,EADAM,UAAaD,OAGjB,OACIE,EAAAA,EAAAA,KAAA,QAAMT,SAAUI,EAAaJ,GAAWU,UAAWT,EAAWU,YAAU,EAAAZ,SACnEa,MAAMC,QAAQd,GACTA,EAASe,KAAI,SAACC,GACV,OAAOA,EAAMC,OAASD,EAAMC,MAAMC,KAC5BC,EAAAA,cAAoBH,EAAMI,MAAIC,EAAAA,EAAAA,GAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEnBL,EAAMC,OAAK,IACdX,SAAAA,EACAgB,IAAKN,EAAMC,MAAMC,KACjBV,OAAAA,EACAD,QAAAA,MAGRS,CACV,IACAhB,GAGlB,E,mMC3CMuB,EAAgB,SAAH1B,GAAyE,IAAnEqB,EAAIrB,EAAJqB,KAAMM,EAAW3B,EAAX2B,YAAaC,EAAW5B,EAAX4B,YAAajB,EAAMX,EAANW,OAAQF,EAAQT,EAARS,SAAUK,EAASd,EAATc,UACvEe,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAEpC,OACIlB,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,UACIiC,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAACvB,UAAU,OAAMX,SAAA,EACxBU,EAAAA,EAAAA,KAACyB,EAAAA,EAAKC,SAAOf,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACTD,KAAMU,EAAe,OAAS,WAC9BN,YAAaA,EACbN,KAAMA,EACNmB,GAAInB,EACJoB,GAAG,QACHC,IAAK,SAACC,GACEf,GAAaA,EAAYe,EACjC,EACA7B,UAAWA,EACX8B,aAAWjC,IAAUA,EAAOU,KACvBZ,EAAWA,EAASY,GAAQ,CAAC,GAAC,IACnCwB,aAAcxB,MAElBR,EAAAA,EAAAA,KAAA,OACIC,UAAWgC,IAAW,mBAAoB,uBAAwB,CAC9D,gBAAiBb,IAErB,gBAAeA,EAAe,OAAS,QAAQ9B,UAC/CU,EAAAA,EAAAA,KAAA,QACIC,UAAU,eACViC,QAAS,WACLb,GAAiBD,EACrB,UAKxB,EA8JA,EA9IkB,SAAHe,GAa2C,IAZtDC,EAAKD,EAALC,MACA1B,EAAIyB,EAAJzB,KACAF,EAAI2B,EAAJ3B,KACAM,EAAWqB,EAAXrB,YACAlB,EAAQuC,EAARvC,SACAE,EAAMqC,EAANrC,OACAG,EAASkC,EAATlC,UACAoC,EAAcF,EAAdE,eACAC,EAAcH,EAAdG,eACAvB,EAAWoB,EAAXpB,YACAzB,EAAQ6C,EAAR7C,SACGiD,GAAUC,EAAAA,EAAAA,GAAAL,EAAAM,GAGPC,EAAgB,aAAThC,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAE/E,OACIV,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,SACc,WAAToB,GACGV,EAAAA,EAAAA,KAAA,SAAAW,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAOD,KAAMA,EAAMF,KAAMA,GAAWZ,EAAWA,EAASY,GAAQ,CAAC,GAAQ+B,KAEzEvC,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,SACc,aAAToB,GACGV,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,UACIiC,EAAAA,EAAAA,MAACE,EAAAA,EAAKkB,MAAK,CAAC1C,UAAWqC,EAAehD,SAAA,CACjC8C,GACGb,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAhC,SAAA,CACK,KACDU,EAAAA,EAAAA,KAACyB,EAAAA,EAAKmB,MAAK,CAAC3C,UAAWoC,EAAe/C,SAAE8C,IAAmB,IAAE9C,EAAU,OAE3E,MACJU,EAAAA,EAAAA,KAACa,EAAa,CACVL,KAAMA,EACNM,YAAaA,EACbC,YAAaA,EACbjB,OAAQA,EACRF,SAAUA,EACVK,UAAWA,IAGdH,GAAUA,EAAOU,IACdR,EAAAA,EAAAA,KAACyB,EAAAA,EAAKC,QAAQmB,SAAQ,CAACnC,KAAK,UAAUT,UAAU,UAASX,SACpDQ,EAAOU,GAAe,UAE3B,WAIZR,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,SACc,WAAToB,GACGV,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,UACIiC,EAAAA,EAAAA,MAACE,EAAAA,EAAKkB,MAAK,CAAC1C,UAAWqC,EAAehD,SAAA,CACjC8C,GAAQpC,EAAAA,EAAAA,KAACyB,EAAAA,EAAKmB,MAAK,CAAC3C,UAAWoC,EAAe/C,SAAE8C,IAAsB,MAEvEpC,EAAAA,EAAAA,KAACyB,EAAAA,EAAKqB,QAAMnC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRD,KAAMA,EACN0B,MAAOA,EACP5B,KAAMA,EACNmB,GAAInB,EACJqB,IAAK,SAACC,GACEf,GAAaA,EAAYe,EACjC,EACAY,KAAMA,EACNzC,UAAWA,EACX8B,aAAWjC,IAAUA,EAAOU,KACvBZ,EAAWA,EAASY,GAAQ,CAAC,GAC9B+B,GAAU,IAAAjD,SACbA,KAGJQ,GAAUA,EAAOU,IACdR,EAAAA,EAAAA,KAACyB,EAAAA,EAAKC,QAAQmB,SAAQ,CAACnC,KAAK,UAASpB,SAChCQ,EAAOU,GAAe,UAE3B,WAIZR,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,SACc,aAAToB,GAAgC,UAATA,GACpBV,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,UACIiC,EAAAA,EAAAA,MAACE,EAAAA,EAAKkB,MAAK,CAAC1C,UAAWqC,EAAehD,SAAA,EAClCU,EAAAA,EAAAA,KAACyB,EAAAA,EAAKsB,OAAKpC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACPD,KAAMA,EACN0B,MAAOA,EACP5B,KAAMA,EACNmB,GAAInB,EACJqB,IAAK,SAACC,GACEf,GAAaA,EAAYe,EACjC,EACA7B,UAAWA,EACX8B,aAAWjC,IAAUA,EAAOU,KACvBZ,EAAWA,EAASY,GAAQ,CAAC,GAC9B+B,IAGPzC,GAAUA,EAAOU,IACdR,EAAAA,EAAAA,KAACyB,EAAAA,EAAKC,QAAQmB,SAAQ,CAACnC,KAAK,UAASpB,SAChCQ,EAAOU,GAAe,UAE3B,WAIZe,EAAAA,EAAAA,MAACE,EAAAA,EAAKkB,MAAK,CAAC1C,UAAWqC,EAAehD,SAAA,CACjC8C,GAAQpC,EAAAA,EAAAA,KAACyB,EAAAA,EAAKmB,MAAK,CAAC3C,UAAWoC,EAAe/C,SAAE8C,IAAsB,MAEvEpC,EAAAA,EAAAA,KAACyB,EAAAA,EAAKC,SAAOf,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACTD,KAAMA,EACNI,YAAaA,EACbN,KAAMA,EACNmB,GAAInB,EACJoB,GAAIc,EACJb,IAAK,SAACC,GACEf,GAAaA,EAAYe,EACjC,EACA7B,UAAWA,EACX8B,aAAWjC,IAAUA,EAAOU,KACvBZ,EAAWA,EAASY,GAAQ,CAAC,GAC9B+B,GAAU,IACdP,aAAcxB,EAAKlB,SAClBA,GAAsB,QAG1BQ,GAAUA,EAAOU,IACdR,EAAAA,EAAAA,KAACyB,EAAAA,EAAKC,QAAQmB,SAAQ,CAACnC,KAAK,UAASpB,SAChCQ,EAAOU,GAAe,UAE3B,eAWhD,C,wGC5HA,IAzDsB,SAAHrB,GAA0F,IAApF6D,EAAW7D,EAAX6D,YAAa1D,EAAQH,EAARG,UAClC2D,EAAAA,EAAAA,YAAU,WAGN,OAFIC,SAASC,MAAMD,SAASC,KAAKC,UAAUC,IAAI,qBAExC,WACCH,SAASC,MAAMD,SAASC,KAAKC,UAAUE,OAAO,oBACtD,CACJ,GAAG,IAEH,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EAER,OACIvD,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,CAAAhC,UACIiC,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,aAAYX,SAAA,EAEvBU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBX,UAChCU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kCAAiCX,UAC5CiC,EAAAA,EAAAA,MAACkC,EAAAA,EAAKC,KAAI,CAAApE,SAAA,EAENiC,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,uCAAsCX,SAAA,EACjDU,EAAAA,EAAAA,KAAC2D,EAAAA,GAAI,CAACC,GAAG,IAAI3D,UAAU,YAAWX,UAC9BU,EAAAA,EAAAA,KAAA,QAAAV,UACIU,EAAAA,EAAAA,KAAA,OAAK6D,IAAKC,EAAUC,IAAI,GAAGC,OAAO,YAG1ChE,EAAAA,EAAAA,KAAC2D,EAAAA,GAAI,CAACC,GAAG,IAAI3D,UAAU,aAAYX,UAC/BU,EAAAA,EAAAA,KAAA,QAAAV,UACIU,EAAAA,EAAAA,KAAA,OAAK6D,IAAKI,EAAWF,IAAI,GAAGC,OAAO,cAK9C1E,EAGA0D,UAMbhD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+BAA8BX,UACzCiC,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,wBAAuBX,SAAA,EAClCU,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAMX,SAAEiE,EAAE,wBACxBhC,EAAAA,EAAAA,MAAA,KAAGtB,UAAU,OAAMX,SAAA,EACfU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,8BAAiC,IAC7CsD,EAAE,mDAAoD,KACvDvD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mCAEjBD,EAAAA,EAAAA,KAAA,KAAAV,SAAIiE,EAAE,iCAM9B,C,gLCpDMW,EAAa,WACf,IAAQX,GAAMC,EAAAA,EAAAA,KAAND,EAER,OACIvD,EAAAA,EAAAA,KAAA,UAAQC,UAAU,oBAAmBX,UACjCiC,EAAAA,EAAAA,MAAA,KAAGtB,UAAU,aAAYX,SAAA,CACpBiE,EAAE,yBAA0B,KAC7BvD,EAAAA,EAAAA,KAAC2D,EAAAA,GAAI,CAACC,GAAI,kBAAmB3D,UAAU,kBAAiBX,UACpDU,EAAAA,EAAAA,KAAA,KAAAV,SAAIiE,EAAE,kBAK1B,EAqHA,UAnHkB,WACd,IAAQA,GAAMC,EAAAA,EAAAA,KAAND,EACFY,GAAWC,EAAAA,EAAAA,MAEjBC,GAAuCC,EAAAA,EAAAA,KAAY,SAACC,GAAK,MAAM,CAC3DC,QAASD,EAAME,KAAKD,QACpBE,MAAOH,EAAME,KAAKC,MAClBC,WAAYJ,EAAME,KAAKE,WAC1B,IAJOH,EAAOH,EAAPG,QAASG,EAAUN,EAAVM,WAAYD,EAAKL,EAALK,OAM7BzB,EAAAA,EAAAA,YAAU,WACNkB,GAASS,EAAAA,EAAAA,MACb,GAAG,CAACT,IAKJ,IAAMU,GAAiBC,EAAAA,EAAAA,GACnBC,EAAAA,KAAaC,MAAM,CACfC,SAAUF,EAAAA,KAAaG,SAAS3B,EAAE,0BAClC4B,MAAOJ,EAAAA,KAAaG,SAAS3B,EAAE,+BAC/B6B,SAAUL,EAAAA,KAAaG,SAAS3B,EAAE,6BAW1C,OACIhC,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAhC,SAAA,CACKqF,GAAa3E,EAAAA,EAAAA,KAACqF,EAAAA,GAAQ,CAACzB,GAAI,sBAA0B,MAEtDrC,EAAAA,EAAAA,MAAC+D,EAAAA,EAAa,CAACtC,aAAahD,EAAAA,EAAAA,KAACkE,EAAU,IAAI5E,SAAA,EACvCU,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAMX,SAAEiE,EAAE,mBACxBvD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,kBAAiBX,SACzBiE,EAAE,8EAGNmB,IACG1E,EAAAA,EAAAA,KAACuF,EAAAA,EAAK,CAACC,QAAQ,SAASvF,UAAU,OAAMX,SACnCoF,KAITnD,EAAAA,EAAAA,MAACkE,EAAAA,EAAY,CAAClG,SApBT,SAACmG,GACdvB,GAASwB,EAAAA,EAAAA,IAAWD,EAAmB,SAAGA,EAAgB,MAAGA,EAAmB,UACpF,EAkB8CrG,SAAUwF,EAAgBzF,cAAe,CAAC,EAAEE,SAAA,EAC1EU,EAAAA,EAAAA,KAAC4F,EAAAA,EAAS,CACNxD,MAAOmB,EAAE,aACT7C,KAAK,OACLF,KAAK,WACLM,YAAayC,EAAE,mBACfjB,eAAgB,UAEpBtC,EAAAA,EAAAA,KAAC4F,EAAAA,EAAS,CACNxD,MAAOmB,EAAE,iBACT7C,KAAK,QACLF,KAAK,QACLM,YAAayC,EAAE,oBACfjB,eAAgB,UAEpBtC,EAAAA,EAAAA,KAAC4F,EAAAA,EAAS,CACNxD,MAAOmB,EAAE,YACT7C,KAAK,WACLF,KAAK,WACLM,YAAayC,EAAE,uBACfjB,eAAgB,UAEpBtC,EAAAA,EAAAA,KAAC4F,EAAAA,EAAS,CACNxD,MAAOmB,EAAE,iCACT7C,KAAK,WACLF,KAAK,iBACL8B,eAAgB,qBAGpBtC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBX,UACpCiC,EAAAA,EAAAA,MAACsE,EAAAA,EAAM,CAACL,QAAQ,UAAU9E,KAAK,SAASoF,SAAUtB,EAAQlF,SAAA,EACtDU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,2BAA6B,IAAEsD,EAAE,iBAKtDhC,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,mBAAkBX,SAAA,EAC7BU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAoBX,SAAEiE,EAAE,oBACrChC,EAAAA,EAAAA,MAAA,MAAItB,UAAU,+BAA8BX,SAAA,EACxCU,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBX,UAC5BU,EAAAA,EAAAA,KAAC2D,EAAAA,GAAI,CAACC,GAAG,IAAI3D,UAAU,+CAA8CX,UACjEU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,0BAGrBD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBX,UAC5BU,EAAAA,EAAAA,KAAC2D,EAAAA,GAAI,CAACC,GAAG,IAAI3D,UAAU,6CAA4CX,UAC/DU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAGrBD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBX,UAC5BU,EAAAA,EAAAA,KAAC2D,EAAAA,GAAI,CAACC,GAAG,IAAI3D,UAAU,yCAAwCX,UAC3DU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAGrBD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBX,UAC5BU,EAAAA,EAAAA,KAAC2D,EAAAA,GAAI,CAACC,GAAG,IAAI3D,UAAU,mDAAkDX,UACrEU,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qCASjD,C","sources":["components/VerticalForm.js","components/FormInput.js","pages/account2/AccountLayout.js","pages/account2/Register2.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// @flow\nimport React, { useEffect } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\n// images\nimport LogoLight from '../../assets/images/logo.png';\nimport LogoDark from '../../assets/images/logo-dark.png';\n\ntype AccountLayoutProps = {\n    bottomLinks?: React$Element<any>,\n    children?: any,\n};\n\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps): React$Element<React$FragmentType> => {\n    useEffect(() => {\n        if (document.body) document.body.classList.add('authentication-bg');\n\n        return () => {\n            if (document.body) document.body.classList.remove('authentication-bg');\n        };\n    }, []);\n\n    const { t } = useTranslation();\n\n    return (\n        <>\n            <div className=\"auth-fluid\">\n                {/* Auth fluid left content */}\n                <div className=\"auth-fluid-form-box\">\n                    <div className=\"align-items-center d-flex h-100\">\n                        <Card.Body>\n                            {/* logo */}\n                            <div className=\"auth-brand text-center text-lg-start\">\n                                <Link to=\"/\" className=\"logo-dark\">\n                                    <span>\n                                        <img src={LogoDark} alt=\"\" height=\"18\" />\n                                    </span>\n                                </Link>\n                                <Link to=\"/\" className=\"logo-light\">\n                                    <span>\n                                        <img src={LogoLight} alt=\"\" height=\"18\" />\n                                    </span>\n                                </Link>\n                            </div>\n\n                            {children}\n\n                            {/* footer links */}\n                            {bottomLinks}\n                        </Card.Body>\n                    </div>\n                </div>\n\n                {/* Auth fluid right content */}\n                <div className=\"auth-fluid-right text-center\">\n                    <div className=\"auth-user-testimonial\">\n                        <h2 className=\"mb-3\">{t('I love the color!')}</h2>\n                        <p className=\"lead\">\n                            <i className=\"mdi mdi-format-quote-open\"></i>{' '}\n                            {t(\"It's a elegent templete. I love it very much! .\")}{' '}\n                            <i className=\"mdi mdi-format-quote-close\"></i>\n                        </p>\n                        <p>{t('- Hyper Admin User')}</p>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default AccountLayout;\n","// @flow\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Navigate, Link } from 'react-router-dom';\nimport { Button, Alert } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// actions\nimport { resetAuth, signupUser } from '../../redux/actions';\n\n// components\nimport { VerticalForm, FormInput } from '../../components/';\n\nimport AccountLayout from './AccountLayout';\n\n/* bottom link */\nconst BottomLink = () => {\n    const { t } = useTranslation();\n\n    return (\n        <footer className=\"footer footer-alt\">\n            <p className=\"text-muted\">\n                {t('Already have account?')}{' '}\n                <Link to={'/account/login2'} className=\"text-muted ms-1\">\n                    <b>{t('Log In')}</b>\n                </Link>\n            </p>\n        </footer>\n    );\n};\n\nconst Register2 = (): React$Element<React$FragmentType> => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const { loading, userSignUp, error } = useSelector((state) => ({\n        loading: state.Auth.loading,\n        error: state.Auth.error,\n        userSignUp: state.Auth.userSignUp,\n    }));\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            fullname: yup.string().required(t('Please enter Fullname')),\n            email: yup.string().required(t('Please enter Email address')),\n            password: yup.string().required(t('Please enter Password')),\n        })\n    );\n\n    /*\n     * handle form submission\n     */\n    const onSubmit = (formData) => {\n        dispatch(signupUser(formData['fullname'], formData['email'], formData['password']));\n    };\n\n    return (\n        <>\n            {userSignUp ? <Navigate to={'/account/confirm2'} /> : null}\n\n            <AccountLayout bottomLinks={<BottomLink />}>\n                <h4 className=\"mt-0\">{t('Free Sign Up')}</h4>\n                <p className=\"text-muted mb-4\">\n                    {t(\"Don't have an account? Create your account, it takes less than a minute.\")}\n                </p>\n\n                {error && (\n                    <Alert variant=\"danger\" className=\"my-2\">\n                        {error}\n                    </Alert>\n                )}\n\n                <VerticalForm onSubmit={onSubmit} resolver={schemaResolver} defaultValues={{}}>\n                    <FormInput\n                        label={t('Full Name')}\n                        type=\"text\"\n                        name=\"fullname\"\n                        placeholder={t('Enter your name')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Email address')}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder={t('Enter your email')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Password')}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder={t('Enter your password')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('I accept Terms and Conditions')}\n                        type=\"checkbox\"\n                        name=\"checkboxsignup\"\n                        containerClass={'mb-3 text-muted'}\n                    />\n\n                    <div className=\"mb-0 d-grid text-center\">\n                        <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n                            <i className=\"mdi mdi-account-circle\"></i> {t('Sign Up')}\n                        </Button>\n                    </div>\n\n                    {/* social links */}\n                    <div className=\"text-center mt-4\">\n                        <p className=\"text-muted font-16\">{t('Sign up using')}</p>\n                        <ul className=\"social-list list-inline mt-3\">\n                            <li className=\"list-inline-item\">\n                                <Link to=\"#\" className=\"social-list-item border-primary text-primary\">\n                                    <i className=\"mdi mdi-facebook\"></i>\n                                </Link>\n                            </li>\n                            <li className=\"list-inline-item\">\n                                <Link to=\"#\" className=\"social-list-item border-danger text-danger\">\n                                    <i className=\"mdi mdi-google\"></i>\n                                </Link>\n                            </li>\n                            <li className=\"list-inline-item\">\n                                <Link to=\"#\" className=\"social-list-item border-info text-info\">\n                                    <i className=\"mdi mdi-twitter\"></i>\n                                </Link>\n                            </li>\n                            <li className=\"list-inline-item\">\n                                <Link to=\"#\" className=\"social-list-item border-secondary text-secondary\">\n                                    <i className=\"mdi mdi-github\"></i>\n                                </Link>\n                            </li>\n                        </ul>\n                    </div>\n                </VerticalForm>\n            </AccountLayout>\n        </>\n    );\n};\n\nexport default Register2;\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","_objectSpread","key","PasswordInput","placeholder","refCallback","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_Fragment","_jsxs","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","otherProps","_objectWithoutProperties","_excluded","comp","Group","Label","Feedback","Select","Check","bottomLinks","useEffect","document","body","classList","add","remove","t","useTranslation","Card","Body","Link","to","src","LogoDark","alt","height","LogoLight","BottomLink","dispatch","useDispatch","_useSelector","useSelector","state","loading","Auth","error","userSignUp","resetAuth","schemaResolver","yupResolver","yup","shape","fullname","required","email","password","Navigate","AccountLayout","Alert","variant","VerticalForm","formData","signupUser","FormInput","Button","disabled"],"sourceRoot":""}