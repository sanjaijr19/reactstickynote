{"version":3,"file":"static/js/2589.260c009b.chunk.js","mappings":"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","sources":["components/NotificationDropdown.js","components/ProfileDropdown.js","components/TopbarSearch.js","layouts/Topbar.js"],"sourcesContent":["// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown } from 'react-bootstrap';\nimport SimpleBar from 'simplebar-react';\nimport classNames from 'classnames';\n\n// notifiaction continer styles\nconst notificationContainerStyle = {\n    maxHeight: '300px',\n    display: 'none',\n};\n\nconst notificationShowContainerStyle = {\n    maxHeight: '300px',\n};\n\ntype Message = {\n    id: number,\n    title: string,\n    time?: string,\n    subText: string,\n    avatar?: string,\n    icon?: string,\n    variant?: string,\n    isRead: boolean,\n};\n\ntype NotificationItem = {\n    day: string,\n    messages: Message[],\n};\n\ntype NotificationDropdownProps = {\n    notifications: Array<NotificationItem>,\n};\n\ntype NotificationDropdownState = {\n    dropdownOpen?: boolean,\n    notificationContainerStyle?: {},\n};\n\nconst NotificationDropdown = (\n    props: NotificationDropdownProps,\n    state: NotificationDropdownState\n): React$Element<any> => {\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [notificationContentStyle, setNotificationContentStyles] = useState(notificationContainerStyle);\n\n    /*\n     * toggle notification-dropdown\n     */\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen);\n        setNotificationContentStyles(\n            notificationContentStyle === notificationContainerStyle\n                ? notificationShowContainerStyle\n                : notificationContainerStyle\n        );\n    };\n\n    return (\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-notification\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle arrow-none\">\n                <i className=\"dripicons-bell noti-icon\"></i>\n                <span className=\"noti-icon-badge\"></span>\n            </Dropdown.Toggle>\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg\">\n                <div onClick={toggleDropdown}>\n                    <div className=\"dropdown-item noti-title px-3\">\n                        <h5 className=\"m-0\">\n                            <span className=\"float-end\">\n                                <Link to=\"/notifications\" className=\"text-dark\">\n                                    <small>Clear All</small>\n                                </Link>\n                            </span>\n                            Notification\n                        </h5>\n                    </div>\n                    <SimpleBar className=\"px-3\" style={notificationContentStyle}>\n                        {props.notifications.map((item, i) => {\n                            return (\n                                <React.Fragment key={i.toString()}>\n                                    <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\n                                    {(item.messages || []).map((message, index) => {\n                                        return (\n                                            <Dropdown.Item\n                                                key={index + '-noti'}\n                                                className={classNames(\n                                                    'p-0 notify-item card shadow-none mb-2',\n                                                    message.isRead ? 'read-noti' : 'unread-noti'\n                                                )}>\n                                                <Card.Body>\n                                                    <span className=\"float-end noti-close-btn text-muted\">\n                                                        <i className=\"mdi mdi-close\"></i>\n                                                    </span>\n                                                    <div className=\"d-flex align-items-center\">\n                                                        <div className=\"flex-shrink-0\">\n                                                            <div\n                                                                className={classNames(\n                                                                    'notify-icon',\n                                                                    message.variant && 'bg-' + message.variant\n                                                                )}>\n                                                                {message.avatar ? (\n                                                                    <img\n                                                                        src={message.avatar}\n                                                                        className=\"img-fluid rounded-circle\"\n                                                                        alt=\"\"\n                                                                    />\n                                                                ) : (\n                                                                    <i className={message.icon}></i>\n                                                                )}\n                                                            </div>\n                                                        </div>\n                                                        <div className=\"flex-grow-1 text-truncate ms-2\">\n                                                            <h5 className=\"noti-item-title fw-semibold font-14\">\n                                                                {message.title}{' '}\n                                                                {message.time && (\n                                                                    <small className=\"fw-normal text-muted ms-1\">\n                                                                        {message.time}\n                                                                    </small>\n                                                                )}\n                                                            </h5>\n                                                            <small className=\"noti-item-subtitle text-muted\">\n                                                                {message.subText}\n                                                            </small>\n                                                        </div>\n                                                    </div>\n                                                </Card.Body>\n                                            </Dropdown.Item>\n                                        );\n                                    })}\n                                </React.Fragment>\n                            );\n                        })}\n\n                        <div className=\"text-center\">\n                            <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\n                        </div>\n                    </SimpleBar>\n\n                    <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\n                        View All\n                    </Dropdown.Item>\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default NotificationDropdown;\n","// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport classNames from 'classnames';\n\ntype ProfileMenuItem = {\n    label: string,\n    icon: string,\n    redirectTo: string,\n};\n\ntype ProfileDropdownProps = {\n    menuItems: Array<ProfileMenuItem>,\n    profilePic?: any,\n    username: string,\n    userTitle?: string,\n};\n\ntype ProfileDropdownState = {\n    dropdownOpen?: boolean,\n};\n\nconst ProfileDropdown = (props: ProfileDropdownProps, state: ProfileDropdownState): React$Element<any> => {\n    const profilePic = props.profilePic || null;\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    /*\n     * toggle profile-dropdown\n     */\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen);\n    };\n\n    return (\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n            <Dropdown.Toggle\n                variant=\"link\"\n                id=\"dropdown-profile\"\n                as={Link}\n                to=\"#\"\n                onClick={toggleDropdown}\n                className=\"nav-link dropdown-toggle nav-user arrow-none me-0\">\n                <span className=\"account-user-avatar\">\n                    <img src={profilePic} className=\"rounded-circle\" alt=\"user\" />\n                </span>\n                <span>\n                    <span className=\"account-user-name\">{props.username}</span>\n                    <span className=\"account-position\">{props.userTitle}</span>\n                </span>\n            </Dropdown.Toggle>\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated topbar-dropdown-menu profile-dropdown\">\n                <div onClick={toggleDropdown}>\n                    <div className=\"dropdown-header noti-title\">\n                        <h6 className=\"text-overflow m-0\">Welcome !</h6>\n                    </div>\n                    {props.menuItems.map((item, i) => {\n                        return (\n                            <Link to={item.redirectTo} className=\"dropdown-item notify-item\" key={i + '-profile-menu'}>\n                                <i className={classNames(item.icon, 'me-1')}></i>\n                                <span>{item.label}</span>\n                            </Link>\n                        );\n                    })}\n                </div>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default ProfileDropdown;\n","// @flow\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Select, { components } from 'react-select';\nimport classNames from 'classnames';\n\n// utils\nimport { groupByFields } from '../utils';\n\n// images\nimport Avatar2 from '../assets/images/users/avatar-2.jpg';\nimport Avatar5 from '../assets/images/users/avatar-5.jpg';\n\n/*\n * get options\n */\nconst optionGetter = (option) => {\n    switch (option.type) {\n        case 'report':\n            return (\n                <Link to=\"#\" className={classNames('dropdown-item', 'notify-item', 'p-0')}>\n                    <i className={classNames(option.icon, 'font-16', 'me-1')}></i>\n                    <span>{option.label}</span>\n                </Link>\n            );\n        case 'help':\n            return (\n                <Link to=\"#\" className={classNames('dropdown-item', 'notify-item', 'p-0')}>\n                    <i className={classNames(option.icon, 'font-16', 'me-1')}></i>\n                    <span>{option.label}</span>\n                </Link>\n            );\n        case 'settings':\n            return (\n                <Link to=\"#\" className={classNames('dropdown-item', 'notify-item', 'p-0')}>\n                    <i className={classNames(option.icon, 'font-16', 'me-1')}></i>\n                    <span>{option.label}</span>\n                </Link>\n            );\n        case 'title':\n            return (\n                <div className=\"noti-title\">\n                    <h6 className=\"text-overflow mb-2 text-uppercase\">Users</h6>\n                </div>\n            );\n        case 'users':\n            return (\n                <>\n                    <Link to=\"#\" className=\"dropdown-item notify-item p-0\">\n                        <div className=\"d-flex\">\n                            <img\n                                src={option.userDetails.avatar}\n                                alt=\"\"\n                                className=\"d-flex me-2 rounded-circle\"\n                                height=\"32\"\n                            />\n                            <div className=\"w-100\">\n                                <h5 className=\"drop-username m-0 font-14\">\n                                    {option.userDetails.firstname} {option.userDetails.lastname}\n                                </h5>\n                                <span className=\"user-subinfo font-12 mb-0\">{option.userDetails.position}</span>\n                            </div>\n                        </div>\n                    </Link>\n                </>\n            );\n\n        default:\n            return;\n    }\n};\n\n/*\n * filter options\n */\nconst formateOptions = (options) => {\n    const grouppedData = groupByFields(options, (item) => {\n        return [item.type];\n    });\n\n    let formattedOptions = [];\n    let count = 0;\n\n    for (let i = 0; i < grouppedData.length; i++) {\n        for (let j = 0; j < grouppedData[i].length; j++) {\n            if (grouppedData[i][j].type === 'users' && count === 0) {\n                grouppedData[i].splice(j, 0, {\n                    label: 'Users',\n                    value: 'title',\n                    type: 'title',\n                });\n                count = 1;\n            }\n            formattedOptions.push(grouppedData[i][j]);\n        }\n    }\n    return formattedOptions;\n};\n\n/* custon control */\n// const Control = ({ children, ...props }) => {\n//     const { handleClick } = props.selectProps;\n//     return (\n//         <components.Control {...props}>\n//             <span onMouseDown={handleClick} className=\"mdi mdi-magnify search-icon\"></span>\n//             {children}\n//         </components.Control>\n//     );\n// };\n//\n// /* custon indicator */\n// const IndicatorsContainer = (props) => {\n//     const { handleClick } = props.selectProps;\n//     return (\n//         <div style={{}}>\n//             <components.IndicatorsContainer {...props} className=\"input-group\">\n//                 <button className=\"btn btn-primary input-group-text\" onMouseDown={handleClick}>\n//                     Search\n//                 </button>\n//             </components.IndicatorsContainer>\n//         </div>\n//     );\n// };\n//\n// /* custom menu list */\n// const MenuList = (props) => {\n//     const { options } = props.selectProps;\n//\n//     return (\n//         <components.MenuList {...props}>\n//             {/* menu header */}\n//             <div className=\"dropdown-header noti-title\">\n//                 <h5 className=\"text-overflow mb-2\">\n//                     Found <span className=\"text-danger\">{options.length}</span> results\n//                 </h5>\n//             </div>\n//             {props.children}\n//         </components.MenuList>\n//     );\n// };\n//\n// /* fomates the option label */\n// const handleFormatOptionLabel = (option) => {\n//     const formattedOption = optionGetter(option);\n//     return <div>{formattedOption}</div>;\n// };\n\ntype TopbarSearchProps = {};\n\nconst \tTopbarSearch = (props: TopbarSearchProps): React$Element<any> => {\n    const options = [\n        { value: '1', label: 'Analytics Report', icon: 'uil-notes', type: 'report' },\n        { value: '2', label: 'How can I help you?', icon: 'uil-life-ring', type: 'help' },\n        { value: '3', label: 'User profile settings', icon: 'uil-cog', type: 'settings' },\n        {\n            label: 'Erwin Brown',\n            value: 'users1',\n            type: 'users',\n            userDetails: {\n                firstname: 'Erwin',\n                lastname: 'Brown',\n                position: 'UI Designer',\n                avatar: Avatar2,\n            },\n        },\n        {\n            label: 'Jacob Deo',\n            value: 'users2',\n            type: 'users',\n            userDetails: {\n                firstname: 'Jacob',\n                lastname: 'Deo',\n                position: 'Developer',\n                avatar: Avatar5,\n            },\n        },\n    ];\n\n    const onClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    return (\n        <>\n\t\t\t<div style={{ position: 'absolute', bottom: 0,left: 50  }}>\n\t\t\t\t<div className=\"app-search dropdown d-none d-lg-block\">\n\t\t\t\t\t<span className=\"logo-mini\" style={{ padding: '4px', float: 'left' }}>Stickynote Panel <b>2.5.6</b></span>\n\t\t\t\t</div>\n\t\t\t</div>\n        </>\n    );\n};\n\nexport default TopbarSearch;\n","// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport classNames from 'classnames';\n\n// actions\nimport { showRightSidebar, changeSidebarType } from '../redux/actions';\n\n// components\nimport LanguageDropdown from '../components/LanguageDropdown';\nimport NotificationDropdown from '../components/NotificationDropdown';\nimport ProfileDropdown from '../components/ProfileDropdown';\nimport SearchDropdown from '../components/SearchDropdown';\nimport TopbarSearch from '../components/TopbarSearch';\nimport AppsDropdown from '../components/AppsDropdown/';\n\n// images\nimport profilePic from '../assets/images/users/avatar-1.jpg';\nimport avatar1 from '../assets/images/users/avatar-2.jpg';\nimport avatar2 from '../assets/images/users/avatar-4.jpg';\nimport logoSmDark from '../assets/images/logo_sm_dark.png';\nimport logoSmLight from '../assets/images/logo_sm.png';\nimport logo from '../assets/images/logo-light.png';\n\n//constants\nimport * as layoutConstants from '../constants/layout';\n\n// get the notifications\nconst Notifications = [\n    {\n        day: 'Today',\n        messages: [\n            {\n                id: 1,\n                title: 'Datacorp',\n                subText: 'Caleb Flakelar commented on Admin',\n                time: '1 min ago',\n                icon: 'mdi mdi-comment-account-outline',\n                variant: 'primary',\n                isRead: false,\n            },\n            {\n                id: 2,\n                title: 'Admin',\n                subText: 'New user registered.',\n                time: '1 hours ago',\n                icon: 'mdi mdi-account-plus',\n                variant: 'info',\n                isRead: true,\n            },\n        ],\n    },\n    {\n        day: 'Yesterday',\n        messages: [\n            {\n                id: 1,\n                title: 'Cristina Pride',\n                subText: 'Hi, How are you? What about our next meeting',\n                time: '1 day ago',\n                avatar: avatar1,\n                isRead: true,\n            },\n        ],\n    },\n    {\n        day: '30 Dec 2021',\n        messages: [\n            {\n                id: 1,\n                title: 'Datacorp',\n                subText: 'Caleb Flakelar commented on Admin',\n                icon: 'mdi mdi-comment-account-outline',\n                variant: 'primary',\n                isRead: true,\n            },\n            {\n                id: 2,\n                title: 'Karen Robinson',\n                subText: 'Wow ! this admin looks good and awesome design',\n                avatar: avatar2,\n                isRead: true,\n            },\n        ],\n    },\n];\n\n// get the profilemenu\nconst ProfileMenus = [\n    {\n        label: 'My Account',\n        icon: 'mdi mdi-account-circle',\n        redirectTo: '#',\n    },\n    {\n        label: 'Settings',\n        icon: 'mdi mdi-account-edit',\n        redirectTo: '#',\n    },\n    {\n        label: 'Lock Screen',\n        icon: 'mdi mdi-lock-outline',\n        redirectTo: '/account/lock-screen',\n    },\n    {\n        label: 'Logout',\n        icon: 'mdi mdi-logout',\n        redirectTo: '/account/logout',\n    },\n];\n\ntype TopbarProps = {\n    hideLogo?: boolean,\n    navCssClasses?: string,\n    openLeftMenuCallBack?: () => void,\n    topbarDark?: boolean,\n};\n\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps): React$Element<any> => {\n    const dispatch = useDispatch();\n\n    const [isopen, setIsopen] = useState(false);\n\n    const navbarCssClasses = navCssClasses || '';\n    const containerCssClasses = !hideLogo ? 'container-fluid' : '';\n\n    const { layoutType, leftSideBarType } = useSelector((state) => ({\n        layoutType: state.Layout.layoutType,\n        leftSideBarType: state.Layout.leftSideBarType,\n    }));\n\n    /**\n     * Toggle the leftmenu when having mobile screen\n     */\n    const handleLeftMenuCallBack = () => {\n        setIsopen((prevState) => !prevState);\n        if (openLeftMenuCallBack) openLeftMenuCallBack();\n\n        switch (layoutType) {\n            case layoutConstants.LAYOUT_VERTICAL:\n                // condition added\n                if (window.innerWidth >= 768) {\n                    if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\n                        dispatch(changeSidebarType(layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED));\n                    if (leftSideBarType === 'condensed')\n                        dispatch(changeSidebarType(layoutConstants.LEFT_SIDEBAR_TYPE_FIXED));\n                }\n                break;\n\n            case layoutConstants.LAYOUT_FULL:\n                if (document.body) {\n                    document.body.classList.toggle('hide-menu');\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    /**\n     * Toggles the right sidebar\n     */\n    const handleRightSideBar = () => {\n        dispatch(showRightSidebar());\n    };\n\n    return (\n        <>\n            <div className={classNames('navbar-custom', navbarCssClasses)}>\n                <div className={containerCssClasses}>\n                    {!hideLogo && (\n                        <Link to=\"/\" className=\"topnav-logo\">\n                            <span className=\"topnav-logo-lg\">\n                                <img src={logo} alt=\"logo\" height=\"16\" />\n                            </span>\n                            <span className=\"topnav-logo-sm\">\n                                <img src={topbarDark ? logoSmLight : logoSmDark} alt=\"logo\" height=\"16\" />\n                            </span>\n                        </Link>\n                    )}\n\n                    <ul className=\"list-unstyled topbar-menu float-end mb-0\">\n                        {/*<li className=\"notification-list topbar-dropdown d-xl-none\">*/}\n                        {/*    <SearchDropdown />*/}\n                        {/*</li>*/}\n                        {/*<li className=\"dropdown notification-list topbar-dropdown d-none d-lg-block\">*/}\n                        {/*    <LanguageDropdown />*/}\n                        {/*</li>*/}\n\t\t\t\t\t\t{/* <li className=\"dropdown notification-list\">\n\t\t\t\t\t\t\t<a href=\"#\" className=\"nav-link dropdown-toggle nav-user arrow float-lg-end mb-0\" data-bs-toggle=\"dropdown\">\n\t\t\t\t\t\t\t\t<span className=\"align-middle\">Pending Followups</span>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li> */}\n\n\t\t\t\t\t\t<li className=\"dropdown notification-list\">\n                            <NotificationDropdown notifications={Notifications} />\n                        </li>\n                        {/*<li className=\"dropdown notification-list d-none d-sm-inline-block\">*/}\n                        {/*    <AppsDropdown />*/}\n                        {/*</li>*/}\n                        {/*<li className=\"notification-list\">*/}\n                        {/*    <button*/}\n                        {/*        className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"*/}\n                        {/*        onClick={handleRightSideBar}>*/}\n                        {/*        <i className=\"dripicons-gear noti-icon\"></i>*/}\n                        {/*    </button>*/}\n                        {/*</li>*/}\n                        <li className=\"dropdown notification-list\">\n                            <ProfileDropdown\n                                profilePic={profilePic}\n                                menuItems={ProfileMenus}\n                                username={'sanjai kumar'}\n                                userTitle={'user'}\n                            />\n                        </li>\n                    </ul>\n\n                    {/* toggle for vertical layout */}\n                    {(layoutType === layoutConstants.LAYOUT_VERTICAL || layoutType === layoutConstants.LAYOUT_FULL) && (\n                        <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\n                            <i className=\"mdi mdi-menu\" />\n                        </button>\n                    )}\n\n                    {/* toggle for horizontal layout */}\n                    {layoutType === layoutConstants.LAYOUT_HORIZONTAL && (\n                        <Link\n                            to=\"#\"\n                            className={classNames('navbar-toggle', { open: isopen })}\n                            onClick={handleLeftMenuCallBack}>\n                            <div className=\"lines\">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </Link>\n                    )}\n\n                    {/* toggle for detached layout */}\n                    {layoutType === layoutConstants.LAYOUT_DETACHED && (\n                        <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\n                            <div className=\"lines\">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        </Link>\n                    )}\n                    <TopbarSearch />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Topbar;\n"],"names":["notificationContainerStyle","maxHeight","display","notificationShowContainerStyle","props","state","_useState","useState","_useState2","_slicedToArray","dropdownOpen","setDropdownOpen","_useState3","_useState4","notificationContentStyle","setNotificationContentStyles","toggleDropdown","_jsxs","Dropdown","show","onToggle","children","Toggle","variant","id","as","Link","to","onClick","className","_jsx","Menu","align","SimpleBar","style","notifications","map","item","i","React","day","messages","message","index","Item","classNames","isRead","Card","Body","avatar","src","alt","icon","title","time","subText","toString","profilePic","username","userTitle","menuItems","redirectTo","label","_Fragment","position","bottom","left","padding","float","Notifications","avatar1","avatar2","ProfileMenus","_ref","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","dispatch","useDispatch","isopen","setIsopen","navbarCssClasses","containerCssClasses","_useSelector","useSelector","layoutType","Layout","leftSideBarType","handleLeftMenuCallBack","prevState","layoutConstants","window","innerWidth","changeSidebarType","document","body","classList","toggle","logo","height","logoSmLight","logoSmDark","NotificationDropdown","ProfileDropdown","open","TopbarSearch"],"sourceRoot":""}