{"version":3,"file":"static/js/5625.4ff7e337.chunk.js","mappings":"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","sources":["components/FileUploader.js","components/PageTitle.js","pages/forms/FileUpload.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Dropzone from 'react-dropzone';\n\ntype FileUploaderProps = {\n    onFileUpload?: (files: any) => void,\n    showPreview?: boolean,\n};\n\nconst FileUploader = (props: FileUploaderProps): React$Element<any> => {\n    const [selectedFiles, setSelectedFiles] = useState([]);\n\n    /**\n     * Handled the accepted files and shows the preview\n     */\n    const handleAcceptedFiles = (files) => {\n        var allFiles = files;\n\n        if (props.showPreview) {\n            files.map((file) =>\n                Object.assign(file, {\n                    preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\n                    formattedSize: formatBytes(file.size),\n                })\n            );\n\n            allFiles = [...selectedFiles];\n            allFiles.push(...files);\n            setSelectedFiles(allFiles);\n        }\n\n        if (props.onFileUpload) props.onFileUpload(allFiles);\n    };\n\n    /**\n     * Formats the size\n     */\n    const formatBytes = (bytes, decimals = 2) => {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    };\n\n    /*\n     * Removes the selected file\n     */\n    const removeFile = (file) => {\n        const newFiles = [...selectedFiles];\n        newFiles.splice(newFiles.indexOf(file), 1);\n        setSelectedFiles(newFiles);\n    };\n\n    return (\n        <>\n            <Dropzone {...props} onDrop={(acceptedFiles) => handleAcceptedFiles(acceptedFiles)}>\n                {({ getRootProps, getInputProps }) => (\n                    <div className=\"dropzone\">\n                        <div className=\"dz-message needsclick\" {...getRootProps()}>\n                            <input {...getInputProps()} />\n                            <i className=\"h3 text-muted dripicons-cloud-upload\"></i>\n                            <h5>Drop files here or click to upload.</h5>\n                            <span className=\"text-muted font-13\">\n                                (This is just a demo dropzone. Selected files are <strong>not</strong> actually\n                                uploaded.)\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </Dropzone>\n\n            {props.showPreview && selectedFiles.length > 0 && (\n                <div className=\"dropzone-previews mt-3\" id=\"uploadPreviewTemplate\">\n                    {(selectedFiles || []).map((f, i) => {\n                        return (\n                            <Card className=\"mt-1 mb-0 shadow-none border\" key={i + '-file'}>\n                                <div className=\"p-2\">\n                                    <Row className=\"align-items-center\">\n                                        {f.preview && (\n                                            <Col className=\"col-auto\">\n                                                <img\n                                                    data-dz-thumbnail=\"\"\n                                                    className=\"avatar-sm rounded bg-light\"\n                                                    alt={f.name}\n                                                    src={f.preview}\n                                                />\n                                            </Col>\n                                        )}\n                                        {!f.preview && (\n                                            <Col className=\"col-auto\">\n                                                <div className=\"avatar-sm\">\n                                                    <span className=\"avatar-title bg-primary rounded\">\n                                                        {f.type.split('/')[0]}\n                                                    </span>\n                                                </div>\n                                            </Col>\n                                        )}\n                                        <Col className=\"ps-0\">\n                                            <Link to=\"#\" className=\"text-muted fw-bold\">\n                                                {f.name}\n                                            </Link>\n                                            <p className=\"mb-0\">\n                                                <strong>{f.formattedSize}</strong>\n                                            </p>\n                                        </Col>\n                                        <Col className=\"text-end\">\n                                            <Link to=\"#\" className=\"btn btn-link btn-lg text-muted shadow-none\">\n                                                <i className=\"dripicons-cross\" onClick={() => removeFile(i)}></i>\n                                            </Link>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Card>\n                        );\n                    })}\n                </div>\n            )}\n        </>\n    );\n};\n\nFileUploader.defaultProps = {\n    showPreview: true,\n};\n\nexport default FileUploader;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Stickynote</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport FileUploader from '../../components/FileUploader';\n\nconst FileUpload = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/upload' },\n                    { label: 'Form Upload', path: '/forms/upload', active: true },\n                ]}\n                title={'Form Upload'}\n            />\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title mb-3\">Dropzone File Upload</h4>\n\n                            <p className=\"text-muted font-13 m-b-30\">\n                                DropzoneJS is an open source library that provides drag’n’drop file uploads with image\n                                previews.\n                            </p>\n\n                            <FileUploader\n                                onFileUpload={(files) => {\n                                    console.log(files);\n                                }}\n                            />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default FileUpload;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body = false,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", {\n  ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["FileUploader","props","_useState","useState","_useState2","_slicedToArray","selectedFiles","setSelectedFiles","formatBytes","bytes","decimals","arguments","length","undefined","dm","i","Math","floor","log","parseFloat","pow","toFixed","_jsxs","_Fragment","children","_jsx","Dropzone","_objectSpread","onDrop","acceptedFiles","files","_allFiles","allFiles","showPreview","map","file","Object","assign","preview","split","URL","createObjectURL","formattedSize","size","_toConsumableArray","push","apply","onFileUpload","handleAcceptedFiles","_ref","getRootProps","getInputProps","className","id","f","Card","Row","Col","alt","name","src","type","Link","to","onClick","newFiles","splice","indexOf","removeFile","defaultProps","Breadcrumb","listProps","Item","href","breadCrumbItems","item","index","active","label","path","title","PageTitle","Body","console","CardImg","React","ref","bsPrefix","variant","_ref$as","as","Component","_objectWithoutProperties","_excluded","prefix","useBootstrapPrefix","classNames","concat","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","value","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","_ref$body","body","Img","Title","Subtitle","Text","Header","Footer","ImgOverlay","context","p"],"sourceRoot":""}