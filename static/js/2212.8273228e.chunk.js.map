{"version":3,"file":"static/js/2212.8273228e.chunk.js","mappings":"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","sources":["components/VerticalForm.js","components/FormInput.js","pages/apps/Chat/data.js","pages/apps/Chat/ChatUsers.js","components/Loader.js","pages/apps/Chat/ChatArea.js","pages/apps/Chat/ChatProfile.js","pages/apps/Chat/index.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/removeEventListener.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// images\nimport avatar1 from '../../../assets/images/users/avatar-1.jpg';\nimport avatar2 from '../../../assets/images/users/avatar-2.jpg';\nimport avatar3 from '../../../assets/images/users/avatar-3.jpg';\nimport avatar4 from '../../../assets/images/users/avatar-4.jpg';\nimport avatar5 from '../../../assets/images/users/avatar-5.jpg';\nimport avatar6 from '../../../assets/images/users/avatar-6.jpg';\nimport avatar7 from '../../../assets/images/users/avatar-7.jpg';\nimport avatar8 from '../../../assets/images/users/avatar-8.jpg';\nimport avatar9 from '../../../assets/images/users/avatar-9.jpg';\n\nconst users = [\n    {\n        id: 1,\n        name: 'Brandon Smith',\n        avatar: avatar2,\n        lastMessage: 'How are you today?',\n        totalUnread: 3,\n        lastMessageOn: '4:30am',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'California, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Favourties',\n    },\n    {\n        id: 2,\n        name: 'Maria C',\n        avatar: avatar5,\n        lastMessage: \"Hey! a reminder for tomorrow's meeting?\",\n        lastMessageOn: '5:30am',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New York, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n    {\n        id: 3,\n        name: 'Dominic A',\n        avatar: avatar4,\n        lastMessage: \"Are we going to have this week's planning meeting?\",\n        totalUnread: 2,\n        lastMessageOn: 'Thu',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New Jersey, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Favourties',\n    },\n    {\n        id: 4,\n        name: 'Ronda D',\n        avatar: avatar9,\n        lastMessage: 'Please check these design assets..',\n        lastMessageOn: 'Wed',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'California, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n    {\n        id: 5,\n        name: 'Michael H',\n        avatar: avatar6,\n        lastMessage: 'Are you free for 15 mins? I would like to discuss something',\n        totalUnread: 6,\n        lastMessageOn: 'Tue',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New York, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n    {\n        id: 6,\n        name: 'Thomas R',\n        avatar: avatar7,\n        lastMessage: \"Let's have meeting today between me, you and Tony...\",\n        lastMessageOn: 'Tue',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New Jersey, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n    {\n        id: 7,\n        name: 'Thomas J',\n        avatar: avatar8,\n        lastMessage: 'Howdy?',\n        lastMessageOn: 'Tue',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New York, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Favourties',\n    },\n    {\n        id: 8,\n        name: 'Rikcy J',\n        avatar: avatar3,\n        lastMessage: 'Are you interested in learning?',\n        totalUnread: 28,\n        lastMessageOn: 'Mon',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New Jersey, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n];\n\nconst messages = [];\n\nconst defaultTo = {\n    id: 9,\n    name: 'Shreyu N',\n    avatar: avatar1,\n    email: 'support@coderthemes.com',\n    phone: '+1 456 9595 9594',\n    location: 'California, USA',\n    languages: 'English, German, Spanish',\n    groups: 'Work, Friends',\n};\n\nfor (const user of users) {\n    messages.push(\n        {\n            id: 1,\n            message: {\n                type: 'text',\n                value: 'Hello!',\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:00',\n        },\n        {\n            id: 2,\n            message: {\n                type: 'text',\n                value: 'Hi, How are you? What about our next meeting?',\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:01',\n        },\n        {\n            id: 3,\n            message: {\n                type: 'text',\n                value: 'Yeah everything is fine',\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:01',\n        },\n        {\n            id: 4,\n            message: {\n                type: 'text',\n                value: 'Awesome!',\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:02',\n        },\n        {\n            id: 5,\n            message: {\n                type: 'text',\n                value: \"Let's have it today if you are free\",\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:03',\n        },\n        {\n            id: 6,\n            message: {\n                type: 'text',\n                value: 'Sure thing! let me know if 2pm works for you',\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:03',\n        },\n        {\n            id: 7,\n            message: {\n                type: 'text',\n                value: 'Sorry, I have another meeting scheduled at 2pm. Can we have it at 3pm instead?',\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:04',\n        },\n        {\n            id: 8,\n            message: {\n                type: 'text',\n                value: 'We can also discuss about the presentation talk format if you have some extra mins',\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:04',\n        },\n        {\n            id: 9,\n            message: {\n                type: 'text',\n                // tslint:disable-next-line: max-line-length\n                value: \"3pm it is. Sure, let's discuss about presentation format, it would be great to finalize today. I am attaching the last year format and assets here..\",\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:05',\n        },\n        {\n            id: 10,\n            message: {\n                type: 'file',\n                value: {\n                    file: 'Hyper-admin.zip',\n                    size: '2.3MB',\n                },\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:05',\n        }\n    );\n}\n\nexport { users, messages };\n","// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\n\n// dummy data\nimport { users } from './data';\n\ntype Users = {\n    id: number,\n    name: string,\n    avatar: string,\n    lastMessage: string,\n    totalUnread?: number,\n    lastMessageOn: string,\n    email: string,\n    phone: string,\n    location: string,\n    languages: string,\n    groups: string,\n};\n\ntype ChatUsersProps = {\n    onUserSelect: (value: Users) => void,\n};\n\n// ChatUsers\nconst ChatUsers = ({ onUserSelect }: ChatUsersProps): React$Element<React$FragmentType> => {\n    const groupFilters = ['All', 'Favourties', 'Friends'];\n\n    const [user, setUser] = useState([...users]);\n    const [selectedUser, setSelectedUser] = useState(users[1]);\n    const [selectedGroup, setSelectedGroup] = useState('All');\n\n    /**\n     * Filter users\n     */\n    const filterUsers = (group) => {\n        setSelectedGroup(group);\n        setUser(\n            group !== 'All'\n                ? [...users].filter((u) => u.groups.toLowerCase().indexOf(group.toLowerCase()) >= 0)\n                : [...users]\n        );\n    };\n\n    /**\n     * Search the user\n     * @param {*} text\n     */\n    const search = (text) => {\n        setUser(text ? [...users].filter((u) => u.name.toLowerCase().indexOf(text.toLowerCase()) >= 0) : [...users]);\n    };\n\n    /**\n     * Activates the user\n     * @param {*} user\n     */\n    const activateUser = (user) => {\n        setSelectedUser(user);\n        if (onUserSelect) {\n            onUserSelect(user);\n        }\n    };\n\n    return (\n        <>\n            <Card>\n                <Card.Body className=\"p-0\">\n                    <ul className=\"nav nav-tabs nav-bordered\">\n                        {groupFilters.map((group, index) => {\n                            return (\n                                <li key={index} className=\"nav-item\" onClick={() => filterUsers(group)}>\n                                    <Link\n                                        to=\"#\"\n                                        className={classnames('nav-link', 'py-2', {\n                                            active: selectedGroup === group,\n                                        })}>\n                                        {group}\n                                    </Link>\n                                </li>\n                            );\n                        })}\n                    </ul>\n\n                    <div className=\"tab-content\">\n                        <div className=\"tab-pane show active\">\n                            <div className=\"app-search p-3\">\n                                <div className=\"form-group position-relative\">\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        placeholder=\"People, groups & messages...\"\n                                        onKeyUp={(e) => search(e.target.value)}\n                                    />\n                                    <span className=\"mdi mdi-magnify search-icon\"></span>\n                                </div>\n                            </div>\n\n                            <SimpleBar className=\"px-3\" style={{ maxHeight: '550px', width: '100%' }}>\n                                {user.map((user, index) => {\n                                    return (\n                                        <Link\n                                            to=\"#\"\n                                            key={index}\n                                            className=\"text-body\"\n                                            onClick={(e) => {\n                                                activateUser(user);\n                                            }}>\n                                            <div\n                                                className={classnames('d-flex', 'align-items-start', 'mt-1', 'p-2', {\n                                                    'bg-light': user.id === selectedUser.id,\n                                                })}>\n                                                <img\n                                                    src={user.avatar}\n                                                    className=\"me-2 rounded-circle\"\n                                                    height=\"48\"\n                                                    alt=\"\"\n                                                />\n\n                                                <div className=\"w-100 overflow-hidden\">\n                                                    <h5 className=\"mt-0 mb-0 font-14\">\n                                                        <span className=\"float-end text-muted font-12\">\n                                                            {user.lastMessageOn}\n                                                        </span>\n                                                        {user.name}\n                                                    </h5>\n                                                    <p className=\"mt-1 mb-0 text-muted font-14\">\n                                                        <span className=\"w-25 float-end text-end\">\n                                                            {user.totalUnread && (\n                                                                <span className=\"badge badge-danger-lighten\">\n                                                                    {user.totalUnread}\n                                                                </span>\n                                                            )}\n                                                        </span>\n                                                        <span className=\"w-75\">{user.lastMessage}</span>\n                                                    </p>\n                                                </div>\n                                            </div>\n                                        </Link>\n                                    );\n                                })}\n                            </SimpleBar>\n                        </div>\n                    </div>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nexport default ChatUsers;\n","// @flow\nimport React from 'react';\n\n/**\n * Renders the preloader\n */\nconst Loader = (): React$Element<any> => {\n    return (\n        <div className=\"preloader\" id=\"preloader\">\n            <div className=\"status\" id=\"status\">\n                <div className=\"bouncing-loader\">\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;\n","// @flow\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport { FormInput } from '../../../components/';\nimport Loader from '../../../components/Loader';\n\n// default data\nimport { messages } from './data';\n\nconst UserMessage = ({ message, toUser }) => {\n    return (\n        <li className={classnames('clearfix', { odd: message.from.id === toUser.id })}>\n            <div className=\"chat-avatar\">\n                <img src={message.from.avatar} className=\"rounded\" alt=\"\" />\n                <i>{message.sendOn}</i>\n            </div>\n\n            <div className=\"conversation-text\">\n                <div className=\"ctext-wrap\">\n                    <i>{message.from.name}</i>\n                    {message.message.type === 'text' && <p>{message.message.value}</p>}\n                </div>\n                {message.message.type === 'file' && (\n                    <Card className=\"mt-2 mb-1 shadow-none border text-start\">\n                        <div className=\"p-2\">\n                            <Row className=\"align-items-center\">\n                                <Col className=\"col-auto\">\n                                    <div className=\"avatar-sm\">\n                                        <span className=\"avatar-title rounded\">\n                                            <i className=\"uil uil-file-upload-alt font-20\"></i>\n                                        </span>\n                                    </div>\n                                </Col>\n                                <Col className=\"ps-0\">\n                                    <Link to=\"#\" className=\"text-muted fw-bold\">\n                                        {message.message.value.file}\n                                    </Link>\n                                    <p className=\"mb-0\">{message.message.value.size}</p>\n                                </Col>\n                                <Col className=\"col-auto\">\n                                    <Link to=\"#\" className=\"btn btn-link btn-lg text-muted\">\n                                        <i className=\"dripicons-download\"></i>\n                                    </Link>\n                                </Col>\n                            </Row>\n                        </div>\n                    </Card>\n                )}\n            </div>\n\n            <Dropdown className=\"conversation-actions\" align=\"end\">\n                <Dropdown.Toggle variant=\"link\" className=\"btn btn-sm btn-link arrow-none shadow-none\">\n                    <i className=\"uil uil-ellipsis-v\"></i>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    <Dropdown.Item>Copy Messaget</Dropdown.Item>\n                    <Dropdown.Item>Edit</Dropdown.Item>\n                    <Dropdown.Item>Delete</Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </li>\n    );\n};\n\ntype ChatAreaProps = {\n    selectedUser: {\n        id: number,\n        name: string,\n        avatar: string,\n        lastMessage: string,\n        totalUnread?: number,\n        lastMessageOn: string,\n        email: string,\n        phone: string,\n        location: string,\n        languages: string,\n        groups: string,\n    },\n};\n\n// ChatArea\nconst ChatArea = ({ selectedUser }: ChatAreaProps): React$Element<React$FragmentType> => {\n    const [loading, setLoading] = useState(false);\n    const [userMessages, setUserMessages] = useState([]);\n    const [toUser] = useState({\n        id: 9,\n        name: 'Shreyu N',\n        avatar: 'assets/images/users/avatar-7.jpg',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'California, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    });\n\n    /*\n     *  Fetches the messages for selected user\n     */\n    const getMessagesForUser = useCallback(() => {\n        if (selectedUser) {\n            setLoading(true);\n            setTimeout(() => {\n                setUserMessages([\n                    ...messages.filter(\n                        (m) =>\n                            (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n                            (toUser.id === m.from.id && m.to.id === selectedUser.id)\n                    ),\n                ]);\n                setLoading(false);\n            }, 750);\n        }\n    }, [selectedUser, toUser]);\n\n    useEffect(() => {\n        getMessagesForUser();\n    }, [getMessagesForUser]);\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    /*\n     * form methods\n     */\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    /**\n     * sends the chat message\n     */\n    const sendChatMessage = (e, values) => {\n        let newUserMessages = [...userMessages];\n        newUserMessages.push({\n            id: userMessages.length + 1,\n            from: toUser,\n            to: selectedUser,\n            message: { type: 'text', value: values.target[0].value },\n            sendOn: new Date().getHours() + ':' + new Date().getMinutes(),\n        });\n        setUserMessages(newUserMessages);\n        reset();\n    };\n\n    return (\n        <>\n            <Card>\n                <Card.Body className=\"position-relative px-0 pb-0\">\n                    {loading && <Loader />}\n\n                    <SimpleBar style={{ height: '538px', width: '100%' }}>\n                        <ul className=\"conversation-list px-3\">\n                            {userMessages.map((message, index) => {\n                                return <UserMessage key={index} message={message} toUser={toUser} />;\n                            })}\n                        </ul>\n                    </SimpleBar>\n\n                    <Row className=\"px-3 pb-3\">\n                        <Col>\n                            <div className=\"mt-2 bg-light p-3 rounded\">\n                                <form\n                                    noValidate\n                                    name=\"chat-form\"\n                                    id=\"chat-form\"\n                                    onSubmit={handleSubmit(sendChatMessage)}>\n                                    <div className=\"row\">\n                                        <div className=\"col mb-2 mb-sm-0\">\n                                            <FormInput\n                                                type=\"text\"\n                                                name=\"newMessage\"\n                                                className=\"border-0\"\n                                                placeholder=\"Enter your text\"\n                                                register={register}\n                                                key=\"newMessage\"\n                                                errors={errors}\n                                                control={control}\n                                            />\n                                        </div>\n                                        <div className=\"col-sm-auto\">\n                                            <div className=\"btn-group\">\n                                                <Link to=\"#\" className=\"btn btn-light\">\n                                                    <i className=\"uil uil-paperclip\"></i>\n                                                </Link>\n                                                <Link to=\"#\" className=\"btn btn-light\">\n                                                    {' '}\n                                                    <i className=\"uil uil-smile\"></i>{' '}\n                                                </Link>\n                                                <button type=\"submit\" className=\"btn btn-success chat-send btn-block\">\n                                                    <i className=\"uil uil-message\"></i>\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nexport default ChatArea;\n","// @flow\nimport React from 'react';\nimport { Card, Dropdown, Button } from 'react-bootstrap';\n\ntype ChatProfileProps = {\n    selectedUser: {\n        id: number,\n        name: string,\n        avatar: string,\n        lastMessage: string,\n        totalUnread?: number,\n        lastMessageOn: string,\n        email: string,\n        phone: string,\n        location: string,\n        languages: string,\n        groups: string,\n    },\n};\n\n// ChatProfile\nconst ChatProfile = ({ selectedUser }: ChatProfileProps): React$Element<React$FragmentType> => {\n    const user = selectedUser || {};\n    const groups = user.groups ? user.groups.split(',') : [];\n\n    return (\n        <>\n            {user && (\n                <Card>\n                    <Card.Body>\n                        <Dropdown className=\"float-end\" align=\"end\">\n                            <Dropdown.Toggle variant=\"link\" className=\"arrow-none card-drop p-0 shadow-none\">\n                                <i className=\"mdi mdi-dots-horizontal\"></i>\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Dropdown.Item>View Full</Dropdown.Item>\n                                <Dropdown.Item>Edit Contact Info</Dropdown.Item>\n                                <Dropdown.Item>Remove</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n\n                        <div className=\"mt-3 text-center\">\n                            <img src={user.avatar} alt=\"\" className=\"img-thumbnail avatar-lg rounded-circle\" />\n                            <h4>{user.name}</h4>\n                            <Button className=\"btn-sm mt-1\" color=\"primary\">\n                                <i className=\"uil uil-envelope-add me-1\"></i>Send Email\n                            </Button>\n                            <p className=\"text-muted mt-2 font-14\">\n                                Last Interacted: <strong>{user.lastMessageOn}</strong>\n                            </p>\n                        </div>\n\n                        <div className=\"mt-3\">\n                            <hr className=\"\" />\n\n                            <p className=\"mt-4 mb-1\">\n                                <strong>\n                                    <i className=\"uil uil-at\"></i> Email:\n                                </strong>\n                            </p>\n                            <p>{user.email}</p>\n\n                            <p className=\"mt-3 mb-1\">\n                                <strong>\n                                    <i className=\"uil uil-phone\"></i> Phone Number:\n                                </strong>\n                            </p>\n                            <p>{user.phone}</p>\n\n                            <p className=\"mt-3 mb-1\">\n                                <strong>\n                                    <i className=\"uil uil-location\"></i> Location:\n                                </strong>\n                            </p>\n                            <p>{user.location}</p>\n\n                            <p className=\"mt-3 mb-1\">\n                                <strong>\n                                    <i className=\"uil uil-globe\"></i> Languages:\n                                </strong>\n                            </p>\n                            <p>{user.languages}</p>\n\n                            <p className=\"mt-3 mb-2\">\n                                <strong>\n                                    <i className=\"uil uil-users-alt\"></i> Groups:\n                                </strong>\n                            </p>\n\n                            <p>\n                                {groups.map((group, index) => {\n                                    return (\n                                        <span key={index} className=\"badge badge-success-lighten p-1 font-14 me-1\">\n                                            {group}\n                                        </span>\n                                    );\n                                })}\n                            </p>\n                        </div>\n                    </Card.Body>\n                </Card>\n            )}\n        </>\n    );\n};\n\nexport default ChatProfile;\n","// @flow\nimport React, { useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../../components/PageTitle';\n\nimport ChatUsers from './ChatUsers';\nimport ChatArea from './ChatArea';\nimport ChatProfile from './ChatProfile';\n\n// dummy data\nimport { users } from './data';\n\n// ChatApp\nconst ChatApp = (): React$Element<React$FragmentType> => {\n    const [selectedUser, setSelectedUser] = useState(users[1]);\n\n    /**\n     * On user change\n     */\n    const onUserChange = (user) => {\n        setSelectedUser(user);\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Apps', path: '/apps/chat' },\n                    { label: 'Chat', path: '/apps/chat', active: true },\n                ]}\n                title={'Chat'}\n            />\n\n            <Row>\n                <Col xxl={3} xl={{ span: 6, order: 1 }}>\n                    <ChatUsers onUserSelect={onUserChange} />\n                </Col>\n\n                <Col xxl={6} xl={{ span: 12, order: 2 }}>\n                    <ChatArea selectedUser={selectedUser} />\n                </Col>\n\n                <Col xxl={{ span: 3, order: 2 }} xl={{ span: 6, order: 1 }}>\n                    <ChatProfile selectedUser={selectedUser} />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default ChatApp;\n","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","_objectSpread","key","PasswordInput","placeholder","refCallback","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_Fragment","_jsxs","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","otherProps","_objectWithoutProperties","_excluded","comp","Group","Label","Feedback","Select","Check","users","avatar","avatar2","lastMessage","totalUnread","lastMessageOn","email","phone","location","languages","groups","avatar5","avatar4","avatar6","avatar7","avatar8","avatar3","messages","defaultTo","avatar1","_i","_users","length","user","push","message","value","to","from","sendOn","file","size","onUserSelect","_toConsumableArray","setUser","_useState3","_useState4","selectedUser","setSelectedUser","_useState5","_useState6","selectedGroup","setSelectedGroup","Card","Body","group","index","filter","u","toLowerCase","indexOf","filterUsers","Link","classnames","active","onKeyUp","e","text","target","SimpleBar","style","maxHeight","width","activateUser","src","height","alt","UserMessage","toUser","odd","Row","Col","Dropdown","align","Toggle","variant","Menu","Item","loading","setLoading","userMessages","setUserMessages","getMessagesForUser","useCallback","setTimeout","m","useEffect","schemaResolver","yupResolver","yup","shape","newMessage","required","reset","Loader","values","newUserMessages","Date","getHours","getMinutes","FormInput","split","Button","color","PageTitle","breadCrumbItems","path","title","xxl","xl","span","order","ChatUsers","ChatArea","ChatProfile","optionsSupported","onceSupported","options","passive","once","canUseDOM","window","addEventListener","removeEventListener","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","this","call","document","createElement","ownerDocument"],"sourceRoot":""}