{"version":3,"file":"static/js/9720.e833984b.chunk.js","mappings":"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","sources":["components/PageTitle.js","components/VerticalForm.js","components/FormInput.js","pages/forms/Basic.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/removeEventListener.js","../node_modules/react-bootstrap/esm/DropdownButton.js","../node_modules/react-bootstrap/esm/types.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Stickynote</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Row, Col, Card, Form, FloatingLabel, InputGroup, Button, Dropdown, DropdownButton } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { FormInput } from '../../components/';\n\nconst BasicInputElements = () => {\n    /*\n     * form methods\n     */\n    const methods = useForm({\n        defaultValues: {\n            password: '12345',\n            statictext: 'email@example.com',\n            color: '#727cf5',\n        },\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Input Types</h4>\n                    <p className=\"text-muted\">\n                        Most common form control, text-based input fields. Includes support for all HTML5 types:{' '}\n                        <code>text</code>, <code>password</code>, <code>datetime</code>, <code>datetime-local</code>,{' '}\n                        <code>date</code>, <code>month</code>, <code>time</code>, <code>week</code>, <code>number</code>\n                        , <code>email</code>, <code>url</code>, <code>search</code>, <code>tel</code>, and{' '}\n                        <code>color</code>.\n                    </p>\n\n                    <Row>\n                        <Col lg={6}>\n                            <form onSubmit={handleSubmit()}>\n                                <FormInput\n                                    label=\"Text\"\n                                    type=\"text\"\n                                    name=\"text\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Email\"\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"email\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Show/Hide Password\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    placeholder=\"password placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"password\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Placeholder\"\n                                    type=\"text\"\n                                    name=\"placeholder\"\n                                    placeholder=\"placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"placeholder\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Text Area\"\n                                    type=\"textarea\"\n                                    name=\"textarea\"\n                                    rows=\"5\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"textarea\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Read only\"\n                                    type=\"text\"\n                                    name=\"text1\"\n                                    id=\"text1\"\n                                    placeholder=\"Readonly value\"\n                                    readOnly\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text1\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Disabled\"\n                                    type=\"text\"\n                                    name=\"text2\"\n                                    id=\"text2\"\n                                    placeholder=\"Disabled value\"\n                                    disabled\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text2\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Static control\"\n                                    type=\"text\"\n                                    name=\"statictext\"\n                                    placeholder=\"Disabled\"\n                                    plaintext\n                                    readOnly\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"statictext\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label htmlFor=\"text3\" className=\"form-label\">\n                                        Helping text\n                                    </Form.Label>\n                                    <Form.Control type=\"text\" name=\"text\" id=\"text3\" placeholder=\"Helping text\" />\n                                    <Form.Text>\n                                        A block of help text that breaks onto a new line and may extend beyond one line.\n                                    </Form.Text>\n                                </Form.Group>\n                            </form>\n                        </Col>\n\n                        <Col lg={6}>\n                            <form onSubmit={handleSubmit()}>\n                                <FormInput\n                                    name=\"select\"\n                                    label=\"Input Select\"\n                                    type=\"select\"\n                                    containerClass=\"mb-3\"\n                                    className=\"form-select\"\n                                    register={register}\n                                    key=\"select\"\n                                    errors={errors}\n                                    control={control}>\n                                    <option>1</option>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </FormInput>\n\n                                <FormInput\n                                    name=\"selectMulti\"\n                                    label=\"Multiple Select\"\n                                    type=\"select\"\n                                    multiple\n                                    containerClass=\"mb-3\"\n                                    className=\"form-select\"\n                                    register={register}\n                                    key=\"selectMulti\"\n                                    errors={errors}\n                                    control={control}>\n                                    <option>1</option>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </FormInput>\n\n                                <FormInput\n                                    label=\"Default file input\"\n                                    type=\"file\"\n                                    name=\"file\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"file\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Date\"\n                                    type=\"date\"\n                                    name=\"date\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"date\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Month\"\n                                    type=\"month\"\n                                    name=\"month\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"month\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Time\"\n                                    type=\"time\"\n                                    name=\"time\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"time\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Week\"\n                                    type=\"week\"\n                                    name=\"week\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"week\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Number\"\n                                    type=\"number\"\n                                    name=\"number\"\n                                    placeholder=\"number placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"number\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Color\"\n                                    type=\"color\"\n                                    name=\"color\"\n                                    placeholder=\"color placeholder\"\n                                    className=\"w-100\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"color\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <Form.Group className=\"mb-0\">\n                                    <Form.Label htmlFor=\"exampleRange\" className=\"form-label\">\n                                        Range\n                                    </Form.Label>\n                                    <Form.Range />\n                                </Form.Group>\n                            </form>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst FloatingLabels = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Floating labels</h4>\n                    <p className=\"text-muted\">\n                        Wrap a <code>&lt;Form.Control&gt;</code> element in <code>&lt;FloatingLabel&gt;</code>\n                        to enable floating labels with Bootstrap’s textual form fields. A <code>placeholder</code>\n                        is required on each <code>&lt;Form.Control&gt;</code> as our method of CSS-only floating labels\n                        uses the <code>:placeholder-shown</code> pseudo-element.\n                    </p>\n\n                    <Row>\n                        <Col lg={6}>\n                            <h5 className=\"mb-3\">Example</h5>\n                            <FloatingLabel controlId=\"floatingInput\" label=\"Email address\" className=\"mb-3\">\n                                <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n                            </FloatingLabel>\n                            <FloatingLabel controlId=\"floatingPassword\" label=\"Password\">\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\n                            </FloatingLabel>\n\n                            <h5 className=\"mb-3 mt-4\">Textareas</h5>\n                            <FloatingLabel controlId=\"floatingTextarea2\" label=\"Comments\">\n                                <Form.Control\n                                    as=\"textarea\"\n                                    placeholder=\"Leave a comment here\"\n                                    style={{ height: '100px' }}\n                                />\n                            </FloatingLabel>\n                        </Col>\n\n                        <Col lg={6}>\n                            <h5 className=\"mb-3\">Selects</h5>\n                            <FloatingLabel controlId=\"floatingSelect\" label=\"Works with selects\">\n                                <Form.Select aria-label=\"Floating label select example\">\n                                    <option>Open this select menu</option>\n                                    <option value=\"1\">One</option>\n                                    <option value=\"2\">Two</option>\n                                    <option value=\"3\">Three</option>\n                                </Form.Select>\n                            </FloatingLabel>\n\n                            <h5 className=\"mb-3 mt-4\">Layout</h5>\n                            <Row className=\"g-2\">\n                                <Col md>\n                                    <FloatingLabel controlId=\"floatingInputGrid\" label=\"Email address\">\n                                        <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n                                    </FloatingLabel>\n                                </Col>\n                                <Col md>\n                                    <FloatingLabel controlId=\"floatingSelectGrid\" label=\"Works with selects\">\n                                        <Form.Select aria-label=\"Floating label select example\">\n                                            <option>Open this select menu</option>\n                                            <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option>\n                                        </Form.Select>\n                                    </FloatingLabel>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst SelectInput = () => {\n    return (\n        <>\n            <h4 className=\"header-title\">Select menu</h4>\n            <p className=\"text-muted\">\n                Custom <code>&lt;select&gt;</code> menus need only a custom class, <code>.custom-select</code> to\n                trigger the custom styles.\n            </p>\n\n            <Form.Group>\n                <Form.Select className=\"custom-select mt-3\" aria-label=\"Default select example\">\n                    <option>1</option>\n                    <option>2</option>\n                    <option>3</option>\n                    <option>4</option>\n                    <option>5</option>\n                </Form.Select>\n            </Form.Group>\n        </>\n    );\n};\n\nconst Switches = () => {\n    return (\n        <>\n            <h4 className=\"header-title mt-4\">Switches</h4>\n            <p className=\"text-muted\">\n                A switch has the markup of a custom checkbox but uses the <code>.custom-switch</code> class to render a\n                toggle switch. Switches also support the <code>disabled</code> attribute.\n            </p>\n\n            <Form>\n                <Form.Check type=\"switch\" id=\"custom-switch\" label=\"Toggle this switch element\" />\n                <Form.Check\n                    disabled\n                    type=\"switch\"\n                    label=\"Disabled switch element\"\n                    id=\"disabled-custom-switch\"\n                    className=\"mt-1\"\n                />\n            </Form>\n        </>\n    );\n};\n\nconst CustomCheckboxes = () => {\n    return (\n        <>\n            <Form.Group>\n                <Form.Label className=\"form-label\" htmlFor=\"exampleCheckbox\">\n                    Checkboxes\n                </Form.Label>\n                <div>\n                    <Form.Check type=\"checkbox\" id=\"default-checkbox\" label=\"Check this custom checkbox\" />\n                    <Form.Check type=\"checkbox\" id=\"default-checkbox\" label=\"But not this disabled one\" disabled />\n                </div>\n            </Form.Group>\n        </>\n    );\n};\n\nconst InlineCustomCheckboxes = () => {\n    return (\n        <Form.Group className=\"mt-2\">\n            <Form.Label className=\"form-check-label\" htmlFor=\"exampleCheckbox\">\n                Inline\n            </Form.Label>\n            <div>\n                <Form.Check type=\"checkbox\" id=\"inline-checkbox\" label=\"An inline custom input\" />\n                <Form.Check type=\"checkbox\" id=\"inline-checkbox\" label=\"and another one\" />\n            </div>\n        </Form.Group>\n    );\n};\n\nconst CustomRadios = () => {\n    return (\n        <Form.Group className=\"mt-2\">\n            <Form.Label className=\"form-label\" htmlFor=\"exampleCheckbox\">\n                Radios\n            </Form.Label>\n            <div>\n                <Form.Check type=\"radio\" id=\"default-checkbox\" label=\"Check this custom checkbox\" />\n                <Form.Check type=\"radio\" id=\"default-checkbox\" label=\"But not this disabled one\" disabled />\n            </div>\n        </Form.Group>\n    );\n};\n\nconst InputSizes = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Sizes</h4>\n                <p className=\"text-muted\">\n                    Use size on <code>&lt;FormControl&gt;</code> and <code>&lt;FormLabel&gt;</code> to change the size\n                    of inputs and labels respectively.\n                </p>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"small\">Small</Form.Label>\n                        <Form.Control type=\"text\" name=\"small\" id=\"small\" placeholder=\"Small\" size=\"sm\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Normal\">Normal</Form.Label>\n                        <Form.Control type=\"text\" name=\"Normal\" id=\"Normal\" placeholder=\"Normal\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Large\">Large</Form.Label>\n                        <Form.Control type=\"text\" name=\"Large\" id=\"Large\" placeholder=\"Large\" size=\"lg\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-0\">\n                        <Form.Label htmlFor=\"grid\">Grid Sizes</Form.Label>\n                        <Row>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\" name=\"grid\" id=\"grid\" placeholder=\".col-sm-4\" />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InputGroups = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Group</h4>\n                <p className=\"text-muted\">\n                    Easily extend form conrols by adding text, buttons, or button groups on either side of textual\n                    inputs, custom selects, and custom file inputs\n                </p>\n\n                <Form>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Static\">Static</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                            <Form.Control\n                                placeholder=\"Username\"\n                                aria-label=\"Username\"\n                                aria-describedby=\"basic-addon1\"\n                            />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Dropdown\">Dropdown</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <DropdownButton variant=\"primary\" title=\"Dropdown\" id=\"input-group-dropdown-1\">\n                                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                                <Dropdown.Divider />\n                                <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                            </DropdownButton>\n                            <Form.Control aria-label=\"Text input with dropdown button\" />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Button\">Button</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <Form.Control\n                                placeholder=\"Recipient's username\"\n                                aria-label=\"Recipient's username\"\n                                aria-describedby=\"basic-addon2\"\n                            />\n                            <Button variant=\"dark\" id=\"button-addon2\">\n                                Button\n                            </Button>\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Row className=\"g-2\">\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"file\">File input</Form.Label>\n                                <Form.Control type=\"file\" />\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"formFileMultiple01\">Multiple input</Form.Label>\n                                <Form.Control type=\"file\" multiple />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DefaultForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Basic Example</h4>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail2\">Email</Form.Label>\n                        <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail2\" placeholder=\"Enter your email\" />\n                        <Form.Text>We'll never share your email with anyone else.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword2\">Password</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            name=\"password\"\n                            id=\"examplePassword2\"\n                            placeholder=\"password placeholder\"\n                            defaultValue=\"12345\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                        <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Horizontal Form</h4>\n                <Form>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail3\" column sm={3}>\n                            Email\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail3\" placeholder=\"Enter your email\" />\n                            <Form.Text>We'll never share your email with anyone else.</Form.Text>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword3\" column sm={3}>\n                            Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword3\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword4\" column sm={3}>\n                            Re-Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword4\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Form.Check label=\"Remember me\" />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-0\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Button variant=\"danger\" type=\"submit\">\n                                Sign in\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InlineForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Inline Form Example</h4>\n                <Form className=\"row row-cols-lg-auto g-3 align-items-center\">\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                readOnly\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"exampleEmail4\"\n                                bsPrefix=\"form-control-plaintext\"\n                                placeholder=\"email@example.com\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword5\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Button color=\"primary\" type=\"submit\">\n                            Confirm identity\n                        </Button>\n                    </div>\n                </Form>\n\n                <h6 className=\"font-13 mt-3\">Auto-sizing</h6>\n\n                <Form>\n                    <Row className=\"align-items-center\">\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInput\" visuallyHidden>\n                                Name\n                            </Form.Label>\n                            <Form.Control className=\"mb-2\" id=\"inlineFormInput\" placeholder=\"Jane Doe\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInputGroup\" visuallyHidden>\n                                Username\n                            </Form.Label>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Text>@</InputGroup.Text>\n                                <Form.Control id=\"inlineFormInputGroup\" placeholder=\"Username\" />\n                            </InputGroup>\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Check type=\"checkbox\" id=\"autoSizingCheck\" className=\"mb-2\" label=\"Remember me\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Button type=\"submit\" className=\"mb-2\">\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalFormLabelSizing = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Horizontal form label sizing</h4>\n                    <p className=\"text-muted font-14\">\n                        You can size the <code>&lt;FormLabel&gt;</code> using the column prop as shown.\n                    </p>\n\n                    <Row>\n                        <Form.Label column=\"lg\" lg={2}>\n                            Large Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control size=\"lg\" type=\"text\" placeholder=\"Large text\" />\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Form.Label column lg={2}>\n                            Normal Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control type=\"text\" placeholder=\"Normal text\" />\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Form.Label column=\"sm\" lg={2}>\n                            Small Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control size=\"sm\" type=\"text\" placeholder=\"Small text\" />\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst FormGrid = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Form Grid</h4>\n\n                    <Form>\n                        <Row className=\"mb-3\">\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"Enter email\" />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\n                            </Form.Group>\n                        </Row>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formGridAddress1\">\n                            <Form.Label>Address</Form.Label>\n                            <Form.Control placeholder=\"1234 Main St\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formGridAddress2\">\n                            <Form.Label>Address 2</Form.Label>\n                            <Form.Control placeholder=\"Apartment, studio, or floor\" />\n                        </Form.Group>\n\n                        <Row className=\"mb-3\">\n                            <Form.Group as={Col} controlId=\"formGridCity\">\n                                <Form.Label>City</Form.Label>\n                                <Form.Control />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridState\">\n                                <Form.Label>State</Form.Label>\n                                <Form.Select defaultValue=\"Choose...\">\n                                    <option>Choose...</option>\n                                    <option>...</option>\n                                </Form.Select>\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridZip\">\n                                <Form.Label>Zip</Form.Label>\n                                <Form.Control />\n                            </Form.Group>\n                        </Row>\n\n                        <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                            <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                        </Form.Group>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst BasicForms = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/basic' },\n                    { label: 'Form Elements', path: '/forms/basic', active: true },\n                ]}\n                title={'Form Elements'}\n            />\n\n            <Row>\n                <Col>\n                    <BasicInputElements />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FloatingLabels />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col lg={6}>\n                                    <SelectInput />\n                                    <Switches />\n                                </Col>\n\n                                <Col lg={6}>\n                                    <h4 className=\"header-title mt-5 mt-sm-0\">Checkboxes and radios</h4>\n                                    <div className=\"mt-3\">\n                                        <CustomCheckboxes />\n                                        <CustomRadios />\n                                        <InlineCustomCheckboxes />\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <InputSizes />\n                </Col>\n\n                <Col lg={6}>\n                    <InputGroups />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <DefaultForm />\n                </Col>\n\n                <Col lg={6}>\n                    <HorizontalForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <InlineForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <HorizontalFormLabelSizing />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FormGrid />\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default BasicForms;\n","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n  /**\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\n   *\n   */\n  flip: PropTypes.bool,\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\n\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  flip,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    flip: flip,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n}), PropTypes.object]);"],"names":["props","_jsx","Row","children","Col","_jsxs","className","Breadcrumb","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","title","_ref","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","child","name","React","type","_objectSpread","key","PasswordInput","placeholder","refCallback","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_Fragment","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","labelClassName","containerClass","otherProps","_objectWithoutProperties","_excluded","comp","Group","Label","Feedback","Select","Check","BasicInputElements","password","statictext","color","Card","Body","lg","FormInput","rows","readOnly","disabled","plaintext","htmlFor","Text","multiple","Range","FloatingLabels","FloatingLabel","controlId","style","height","value","md","SelectInput","Switches","CustomCheckboxes","InlineCustomCheckboxes","CustomRadios","InputSizes","size","sm","InputGroups","DropdownButton","variant","Dropdown","Divider","Button","DefaultForm","defaultValue","HorizontalForm","column","span","offset","InlineForm","bsPrefix","xs","visuallyHidden","HorizontalFormLabelSizing","FormGrid","PageTitle","optionsSupported","onceSupported","options","passive","once","canUseDOM","window","addEventListener","removeEventListener","e","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","this","call","document","createElement","ownerDocument","propTypes","PropTypes","isRequired","align","alignPropType","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","flip","DropdownToggle","childBsPrefix","DropdownMenu","role","renderOnMount","displayName","alignDirection","xl","xxl"],"sourceRoot":""}