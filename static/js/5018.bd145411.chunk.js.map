{"version":3,"file":"static/js/5018.bd145411.chunk.js","mappings":"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","sources":["components/PageTitle.js","pages/uikit/Badges.js","../node_modules/react-bootstrap/esm/Badge.js","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Stickynote</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Card, Badge, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst colors = [\n    {\n        name: 'Primary',\n        color: 'primary',\n    },\n    {\n        name: 'Secondary',\n        color: 'secondary',\n    },\n    {\n        name: 'Success',\n        color: 'success',\n    },\n    {\n        name: 'Danger',\n        color: 'danger',\n    },\n    {\n        name: 'Warning',\n        color: 'warning',\n    },\n    {\n        name: 'Info',\n        color: 'info',\n    },\n    {\n        name: 'Light',\n        color: 'light',\n    },\n    {\n        name: 'Dark',\n        color: 'dark',\n    },\n];\n\nconst DefaultBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Default</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    A simple labeling component. Badges scale to match the size of the immediate parent element by using\n                    relative font sizing and <code>em</code> units.\n                </p>\n\n                <h1>\n                    h1.Example heading <span className=\"badge bg-secondary text-light\">New</span>\n                </h1>\n                <h2>\n                    h2.Example heading <span className=\"badge badge-success-lighten\">New</span>\n                </h2>\n                <h3>\n                    h3.Example heading <span className=\"badge bg-primary\">New</span>\n                </h3>\n                <h4>\n                    h4.Example heading{' '}\n                    <Link to=\"#\" className=\"badge badge-info-lighten\">\n                        Info Link\n                    </Link>\n                </h4>\n                <h5>\n                    h5.Example heading <span className=\"badge badge-outline-warning\">New</span>\n                </h5>\n                <h6>\n                    h6.Example heading <span className=\"badge bg-danger\">New</span>\n                </h6>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ContexualBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Contexual variations</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Add any of the below mentioned modifier classes to change the appearance of a badge. Badge can be\n                    more contextual as well. Just use regular convention e.g. <code>badge-*color</code>,\n                    <code>bg-primary</code> to have badge with different background.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            className={classNames(\n                                'me-1',\n                                'bg-' + color.color,\n                                color.color === 'light' ? 'text-dark' : null\n                            )}\n                            key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Lighten Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-*-lighten</code> modifier class, you can have more soften variation.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge bg=\"\" className={classNames('me-1', 'badge-' + color.color + '-lighten')} key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Outline Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-outline-*</code> to quickly create a bordered badges.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge bg=\"\" className={classNames('me-1', 'badge-outline-' + color.color)} key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst PillBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Pill Badges</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use the <code>.rounded-pill</code> modifier class to make badges more rounded.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            pill\n                            className={classNames(\n                                'me-1',\n                                'bg-' + color.color,\n                                color.color === 'light' ? 'text-dark' : null\n                            )}\n                            key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Lighten Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use the <code>.badge-*-lighten</code> modifier class to make badges lighten.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            bg=\"\"\n                            pill\n                            className={classNames('me-1', 'badge-' + color.color + '-lighten')}\n                            key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Outline Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-outline-*</code> to quickly create a bordered badges.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge bg=\"\" pill className={classNames('me-1', 'badge-outline-' + color.color)} key={index}>\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BadgePosition = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Badge Positioned</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use utilities to modify a <code>.badge</code> and position it in the corner of a link or button.\n                </p>\n\n                <Row>\n                    <Col className=\"col-6\">\n                        <Button variant=\"primary\" className=\"position-relative\">\n                            Inbox\n                            <span className=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\n                                99+\n                                <span className=\"visually-hidden\">unread messages</span>\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col className=\"col-6\">\n                        <Button variant=\"primary\" className=\"position-relative\">\n                            Profile\n                            <span className=\"position-absolute top-0 start-100 translate-middle p-1 bg-danger border border-light rounded-circle\">\n                                <span className=\"visually-hidden\">New alerts</span>\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col className=\"col-6\">\n                        <Button variant=\"success\" className=\"mt-4\">\n                            Notifications <span className=\"badge bg-light text-dark ms-1\">4</span>\n                        </Button>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Badges = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/badges' },\n                    { label: 'Badges', path: '/ui/badges', active: true },\n                ]}\n                title={'Badges'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <DefaultBadges />\n                    <PillBadges />\n                </Col>\n\n                <Col xl={6}>\n                    <ContexualBadges />\n                    <BadgePosition />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Badges;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Badge = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  bg = 'primary',\n  pill = false,\n  text,\n  className,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)\n  });\n});\nBadge.displayName = 'Badge';\nexport default Badge;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body = false,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", {\n  ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["props","_jsx","Row","children","Col","_jsxs","className","Breadcrumb","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","title","colors","name","color","DefaultBadges","Card","Body","Link","to","ContexualBadges","Badge","classNames","bg","PillBadges","pill","BadgePosition","Button","variant","_Fragment","PageTitle","xl","React","_ref","ref","bsPrefix","_ref$bg","_ref$pill","text","_ref$as","as","Component","_objectWithoutProperties","_excluded","prefix","useBootstrapPrefix","_objectSpread","concat","displayName","_ref$variant","size","_ref$active","_ref$disabled","disabled","_useButtonProps","useButtonProps","tagName","_useButtonProps2","_slicedToArray","buttonProps","CardImg","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","value","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","border","_ref$body","body","Object","assign","Img","Title","Subtitle","Text","Header","Footer","ImgOverlay","context","p"],"sourceRoot":""}