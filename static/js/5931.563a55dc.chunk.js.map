{"version":3,"file":"static/js/5931.563a55dc.chunk.js","mappings":"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","sources":["components/PageTitle.js","pages/uikit/Progress.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/ProgressBar.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Stickynote</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Card, ProgressBar } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst Basic = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Examples</h4>\n                <p className=\"text-muted font-14\">\n                    A progressBar bar can be used to show a user how far along he/she is in a process.\n                </p>\n\n                <ProgressBar />\n                <ProgressBar now=\"25\" className=\"mt-2\" />\n                <ProgressBar now={50} className=\"mt-2\" />\n                <ProgressBar now={75} className=\"mt-2\" />\n                <ProgressBar now=\"100\" className=\"mt-2\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WithLabels = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Labels</h4>\n                <p className=\"text-muted font-14\">\n                    Add a <code>label</code> prop to show a visible percentage. For low percentages, consider adding a\n                    min-width to ensure the label's text is fully visible.\n                </p>\n\n                <ProgressBar now={25} label={`25%`} />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ScreenreaderOnlyLabel = () => {\n    const now = 60;\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Screenreader only label</h4>\n                <p className=\"text-muted font-14\">\n                    Add a <code>visuallyHidden</code> prop to hide the label visually.\n                </p>\n\n                <ProgressBar now={now} label={`${now}%`} visuallyHidden />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ContextualAlternatives = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Contextual alternatives</h4>\n                <p className=\"text-muted font-14\">\n                    Progress bars use some of the same button and alert classes for consistent styles.\n                </p>\n\n                <ProgressBar now={25} className=\"mt-2\" variant=\"success\" />\n                <ProgressBar now={50} className=\"mt-2\" variant=\"info\" />\n                <ProgressBar now={75} className=\"mt-2\" variant=\"warning\" />\n                <ProgressBar now={100} className=\"mt-2\" variant=\"danger\" />\n                <ProgressBar now={65} className=\"mt-2\" variant=\"dark\" />\n                <ProgressBar now={50} className=\"mt-2\" variant=\"secondary\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Height = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Height</h4>\n                <p className=\"text-muted font-14\">\n                    We only set a <code>height</code> value on the <code>ProgressBar</code>, so if you change that value\n                    the inner <code>.progress-bar</code> will automatically resize accordingly. Use{' '}\n                    <code>.progress-sm</code>,<code>.progress-md</code>,<code>.progress-lg</code>,\n                    <code>.progress-xl</code> classes.\n                </p>\n\n                <ProgressBar now=\"25\" variant=\"danger\" style={{ height: 1 }} />\n                <ProgressBar now=\"25\" className=\"mt-2\" style={{ height: 3 }} />\n                <ProgressBar now={25} className=\"mt-2 progress-sm\" variant=\"success\" />\n                <ProgressBar now={50} className=\"mt-2 progress-md\" variant=\"info\" />\n                <ProgressBar now=\"75\" className=\"mt-2 progress-lg\" variant=\"warning\" />\n                <ProgressBar now=\"38\" className=\"mt-2 progress-xl\" variant=\"success\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Striped = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Striped</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>striped</code> to any <code>ProgressBar</code> to apply a stripe via CSS gradient over the\n                    progressBar bar’s background color.\n                </p>\n\n                <ProgressBar now={10} striped />\n                <ProgressBar now=\"25\" className=\"mt-2\" variant=\"success\" striped />\n                <ProgressBar now={50} className=\"mt-2\" variant=\"info\" striped />\n                <ProgressBar now={75} className=\"mt-2\" variant=\"warning\" striped />\n                <ProgressBar now=\"100\" className=\"mt-2\" variant=\"danger\" striped />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Animated = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Animated stripes</h4>\n                <p className=\"text-muted font-14\">\n                    The striped gradient can also be animated. Add <code>animated</code> to <code>ProgressBar</code> to\n                    animate the stripes right to left via CSS3 animations.\n                </p>\n\n                <ProgressBar now={45} variant=\"primary\" animated></ProgressBar>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Stacked = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Stacked</h4>\n                <p className=\"text-muted font-14\">\n                    Nest <code>&lt;ProgressBar /&gt;</code>s to stack them.\n                </p>\n                <ProgressBar>\n                    <ProgressBar striped variant=\"success\" now={35} key={1} />\n                    <ProgressBar variant=\"warning\" now={20} key={2} />\n                    <ProgressBar striped variant=\"danger\" now={10} key={3} />\n                </ProgressBar>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ProgressBarExamples = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/progressBar' },\n                    { label: 'ProgressBar', path: '/ui/progressBar', active: true },\n                ]}\n                title={'ProgressBar'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Basic />\n                    <ScreenreaderOnlyLabel />\n                    <Height />\n                    <Animated />\n                </Col>\n                <Col xl={6}>\n                    <WithLabels />\n                    <ContextualAlternatives />\n                    <Striped />\n                    <Stacked />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default ProgressBarExamples;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body = false,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n\n/**\n * Validate that children, if any, are instances of `ProgressBar`.\n */\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n  if (!children) {\n    return null;\n  }\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild = false,\n  ...rest\n}, ref) => {\n  const props = {\n    min: 0,\n    max: 100,\n    animated: false,\n    visuallyHidden: false,\n    striped: false,\n    ...rest\n  };\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", {\n  ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["props","_jsx","Row","children","Col","_jsxs","className","Breadcrumb","listProps","Item","href","breadCrumbItems","map","item","index","active","label","path","title","Basic","Card","Body","ProgressBar","now","WithLabels","ScreenreaderOnlyLabel","concat","visuallyHidden","ContextualAlternatives","variant","Height","style","height","Striped","striped","Animated","animated","Stacked","_Fragment","PageTitle","xl","CardImg","React","_ref","ref","bsPrefix","_ref$as","as","Component","_objectWithoutProperties","_excluded","prefix","useBootstrapPrefix","_objectSpread","classNames","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","value","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","_ref$body","body","Object","assign","Img","Title","Subtitle","Link","Text","Header","Footer","ImgOverlay","context","ROUND_PRECISION","getPercentage","min","max","percentage","Math","round","renderProgressBar","_classNames","role","_defineProperty","width","_ref2","_ref2$isChild","isChild","rest","_excluded2","wrapperProps","_excluded3","child","cloneElement","p"],"sourceRoot":""}